[{
  "history_id" : "5thy8s0bg8x",
  "history_input" : "\n# Importing necessary libraries\nimport pandas as pd\nimport pickle\nfrom pathlib import Path\nfrom time import sleep\n\n# home directory\nhome = str(Path.home())\n# importing data\nfinal=pd.read_csv(home+'/cmaq/testing.csv')\nprint(final.head())\nX = final.drop(['YYYYMMDDHH','Latitude','Longitude',],axis=1)\n# defining  testing variables\n# processing test data\n\n# load the model from disk\nfilename = '/groups/ESS/aalnaim/cmaq/models/rf.sav'\n#filename = 'D:/Research/CMAQ/local_test/xgboost.sav'\nloaded_model = pickle.load(open(filename, 'rb'))\n\n# making prediction\npred = loaded_model.predict(X)\n\n# adding prediction values to test dataset\nfinal['prediction'] = pred.tolist()\n\nfinal = final[['Latitude', 'Longitude','YYYYMMDDHH','prediction']]\n# saving the dataset into local drive\nfinal.to_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv',index=False)",
  "history_output" : "    Latitude   Longitude  YYYYMMDDHH  ...  month  day  hours\n0  21.829086 -120.620790  2022052712  ...      5   27     12\n1  21.855751 -120.512500  2022052712  ...      5   27     12\n2  21.882309 -120.404144  2022052712  ...      5   27     12\n3  21.908745 -120.295715  2022052712  ...      5   27     12\n4  21.935051 -120.187225  2022052712  ...      5   27     12\n\n[5 rows x 18 columns]\n",
  "history_begin_time" : 1654493107576,
  "history_end_time" : 1654500507415,
  "history_notes" : null,
  "history_process" : "l8vlic",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "2x6aznc7yzz",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\nos.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_\" + str(t) + \".tif\")\n    \nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "  File \"prediction_maps.py\", line 110\n    imageio.mimsave(\"/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n                                                                             ^\nSyntaxError: EOL while scanning string literal\n",
  "history_begin_time" : 1654500507944,
  "history_end_time" : 1654500512174,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
}]
