[{
  "history_id" : "cKXAvLlgJ17G",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf_Jun13.csv')\ncmaq_actual = pd.read_csv(\"/groups/ESS/aalnaim/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(\"/groups/ESS/aalnaim/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ndef add_colorbar(fig, axes):\n  \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = fig.colorbar(sm, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05, ax=axes)\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n    \nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\n    \nadd_colorbar(fig, ax1)\nadd_colorbar(fig, ax2)\nadd_colorbar(fig, ax3)\nadd_colorbar(fig, ax4) \n    \n    \nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n       \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n    \n\n\n",
  "history_output" : "Plotting...  2022061312\nSaving Prediction Map:  2022-06-13 (Time: 12)\nPlotting...  2022061313\nSaving Prediction Map:  2022-06-13 (Time: 13)\nPlotting...  2022061314\nSaving Prediction Map:  2022-06-13 (Time: 14)\nPlotting...  2022061315\nSaving Prediction Map:  2022-06-13 (Time: 15)\nPlotting...  2022061316\nSaving Prediction Map:  2022-06-13 (Time: 16)\nPlotting...  2022061317\nSaving Prediction Map:  2022-06-13 (Time: 17)\nPlotting...  2022061318\nSaving Prediction Map:  2022-06-13 (Time: 18)\nPlotting...  2022061319\nSaving Prediction Map:  2022-06-13 (Time: 19)\nPlotting...  2022061320\n",
  "history_begin_time" : 1655312270049,
  "history_end_time" : 1655406242239,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "kRolBJc1jNml",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(\"/groups/ESS/aalnaim/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(\"/groups/ESS/aalnaim/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ndef add_colorbar(fig, axes):\n  \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = fig.colorbar(sm, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05, ax=axes)\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n    \nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\n    \n#add_colorbar(fig, ax1)\n#add_colorbar(fig, ax2)\n#add_colorbar(fig, ax3)\n#add_colorbar(fig, ax4) \n    \n    \nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n       \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n    \n\n\n",
  "history_output" : "Plotting...  2022061312\nSaving Prediction Map:  2022-06-13 (Time: 12)\nPlotting...  2022061313\nSaving Prediction Map:  2022-06-13 (Time: 13)\nPlotting...  2022061314\nSaving Prediction Map:  2022-06-13 (Time: 14)\nPlotting...  2022061315\nSaving Prediction Map:  2022-06-13 (Time: 15)\nPlotting...  2022061316\nSaving Prediction Map:  2022-06-13 (Time: 16)\nPlotting...  2022061317\nSaving Prediction Map:  2022-06-13 (Time: 17)\nPlotting...  2022061318\nSaving Prediction Map:  2022-06-13 (Time: 18)\n",
  "history_begin_time" : 1655306883159,
  "history_end_time" : 1655307558934,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Running"
},{
  "history_id" : "I46rX45OXPCl",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(\"/groups/ESS/aalnaim/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(\"/groups/ESS/aalnaim/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ndef add_colorbar(fig, axes):\n  \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = fig.colorbar(sm, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05, ax=axes)\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n    \nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\n    \n#add_colorbar(fig, ax1)\n#add_colorbar(fig, ax2)\n#add_colorbar(fig, ax3)\n#add_colorbar(fig, ax4) \n    \n    \nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n       \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n    \n\n\n",
  "history_output" : null,
  "history_begin_time" : 1655306825984,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : null
},{
  "history_id" : "jDbfFXybpsOh",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(\"/groups/ESS/aalnaim/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(\"/groups/ESS/aalnaim/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ndef add_colorbar(fig, axes):\n  \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = fig.colorbar(sm, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05, ax=axes)\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n    \nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\n    \nadd_colorbar(fig, ax1)\nadd_colorbar(fig, ax2)\nadd_colorbar(fig, ax3)\nadd_colorbar(fig, ax4) \n    \n    \nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n       \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n    \n\n\n",
  "history_output" : "Plotting...  2022061312\nSaving Prediction Map:  2022-06-13 (Time: 12)\nPlotting...  2022061313\nSaving Prediction Map:  2022-06-13 (Time: 13)\nPlotting...  2022061314\nSaving Prediction Map:  2022-06-13 (Time: 14)\nPlotting...  2022061315\nSaving Prediction Map:  2022-06-13 (Time: 15)\nPlotting...  2022061316\nSaving Prediction Map:  2022-06-13 (Time: 16)\nPlotting...  2022061317\nSaving Prediction Map:  2022-06-13 (Time: 17)\nPlotting...  2022061318\nSaving Prediction Map:  2022-06-13 (Time: 18)\nPlotting...  2022061319\nSaving Prediction Map:  2022-06-13 (Time: 19)\nPlotting...  2022061320\n",
  "history_begin_time" : 1655303850689,
  "history_end_time" : 1655306856026,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "l3GvuKN58y4X",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n    \n\n\n",
  "history_output" : "/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061100.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061101.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061102.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061103.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061104.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061105.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061106.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061107.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061108.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061109.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061110.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061111.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061112.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061113.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061114.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061115.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061116.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061117.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061118.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061119.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061120.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061121.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061122.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061123.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061200.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061201.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061202.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061203.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061204.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061205.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061206.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061207.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061208.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061209.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061210.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061211.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061212.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061213.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061214.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061215.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061216.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061217.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061218.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061219.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061220.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061221.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061222.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061223.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061300.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061301.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061302.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061303.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061304.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061305.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061306.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061307.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061308.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061309.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061310.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061311.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061313.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061314.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061315.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061316.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061317.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061318.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061319.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061320.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061321.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061322.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061323.tif\nGenerating prediction.gif ...\nffmpeg version 4.2.2 Copyright (c) 2000-2019 the FFmpeg developers\n  built with gcc 9.3.0 (GCC)\n  configuration: --prefix=/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0/ffmpeg-4.2.2-ey --enable-pic --cc=/opt/sw/spack/0.16.0/lib/spack/env/gcc/gcc --cxx=/opt/sw/spack/0.16.0/lib/spack/env/gcc/g++ --enable-libxcb --enable-libxcb-shape --enable-libxcb-shm --enable-libxcb-xfixes --enable-xlib --disable-libfontconfig --disable-libfreetype --disable-libfribidi --enable-bzlib --enable-libmp3lame --enable-libopenjpeg --disable-libopus --enable-libspeex --enable-libvorbis --enable-avresample --enable-openssl --enable-shared --disable-libzmq --disable-libssh --disable-libwebp --disable-lzma --disable-libsnappy --enable-sdl2 --enable-libaom\n  libavutil      56. 31.100 / 56. 31.100\n  libavcodec     58. 54.100 / 58. 54.100\n  libavformat    58. 29.100 / 58. 29.100\n  libavdevice    58.  8.100 / 58.  8.100\n  libavfilter     7. 57.100 /  7. 57.100\n  libavresample   4.  0.  0 /  4.  0.  0\n  libswscale      5.  5.100 /  5.  5.100\n  libswresample   3.  5.100 /  3.  5.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/groups/ESS/aalnaim/cmaq/prediction.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:07.10, start: 0.000000, bitrate: 4 kb/s\n    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 640x480, 2 kb/s, 10 fps, 10 tbr, 10240 tbn, 20 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\nOutput #0, gif, to '/groups/ESS/aalnaim/cmaq/prediction.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n    Stream #0:0(und): Video: gif, pal8, 2000x1500, q=2-31, 200 kb/s, 10 fps, 100 tbn, 10 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\n      encoder         : Lavc58.54.100 gif\nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \n\u001B[1;32m[Parsed_palettegen_2 @ 0x148acc0] \u001B[0m4(+1) colors generated out of 4 colors; ratio=1.000000\nframe=    3 fps=2.0 q=-0.0 size=       6kB time=00:00:00.21 bitrate= 219.9kbits/s speed=0.137x    \nframe=   12 fps=5.8 q=-0.0 size=       6kB time=00:00:01.11 bitrate=  43.2kbits/s speed=0.54x    \nframe=   21 fps=8.1 q=-0.0 size=       6kB time=00:00:02.01 bitrate=  24.8kbits/s speed=0.771x    \nframe=   30 fps=9.5 q=-0.0 size=       6kB time=00:00:02.91 bitrate=  17.7kbits/s speed=0.922x    \nframe=   39 fps= 11 q=-0.0 size=       7kB time=00:00:03.81 bitrate=  14.0kbits/s speed=1.03x    \nframe=   48 fps= 11 q=-0.0 size=       7kB time=00:00:04.71 bitrate=  11.7kbits/s speed=1.11x    \nframe=   57 fps= 12 q=-0.0 size=       7kB time=00:00:05.61 bitrate=  10.2kbits/s speed=1.17x    \nframe=   66 fps= 12 q=-0.0 size=       7kB time=00:00:06.51 bitrate=   9.0kbits/s speed=1.22x    \nframe=   70 fps= 12 q=-0.0 Lsize=       7kB time=00:00:06.91 bitrate=   8.7kbits/s speed=1.23x    \nvideo:7kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.268312%\nDone prediction.gif !!!\n",
  "history_begin_time" : 1655303587784,
  "history_end_time" : 1655306726671,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "vZpUSktu1naw",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(\"/groups/ESS/aalnaim/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(\"/groups/ESS/aalnaim/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ndef add_colorbar(fig, axes):\n  \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = fig.colorbar(sm, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05, ax=axes)\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n    \nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\n    \nadd_colorbar(fig, ax1)\nadd_colorbar(fig, ax2)\nadd_colorbar(fig, ax3)\nadd_colorbar(fig, ax4) \n    \n    \nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n       \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    plt.close()\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n    \n\n\n",
  "history_output" : "Plotting...  2022061312\nSaving Prediction Map:  2022-06-13 (Time: 12)\nPlotting...  2022061313\nSaving Prediction Map:  2022-06-13 (Time: 13)\nPlotting...  2022061314\nSaving Prediction Map:  2022-06-13 (Time: 14)\nPlotting...  2022061315\nSaving Prediction Map:  2022-06-13 (Time: 15)\nPlotting...  2022061316\nSaving Prediction Map:  2022-06-13 (Time: 16)\nPlotting...  2022061317\nSaving Prediction Map:  2022-06-13 (Time: 17)\nPlotting...  2022061318\nSaving Prediction Map:  2022-06-13 (Time: 18)\nPlotting...  2022061319\nSaving Prediction Map:  2022-06-13 (Time: 19)\nPlotting...  2022061320\nSaving Prediction Map:  2022-06-13 (Time: 20)\nPlotting...  2022061321\nSaving Prediction Map:  2022-06-13 (Time: 21)\nPlotting...  2022061322\nSaving Prediction Map:  2022-06-13 (Time: 22)\nPlotting...  2022061323\nSaving Prediction Map:  2022-06-13 (Time: 23)\nPlotting...  2022061300\nSaving Prediction Map:  2022-06-13 (Time: 0)\nPlotting...  2022061301\nSaving Prediction Map:  2022-06-13 (Time: 1)\nPlotting...  2022061302\nSaving Prediction Map:  2022-06-13 (Time: 2)\nPlotting...  2022061303\nSaving Prediction Map:  2022-06-13 (Time: 3)\nPlotting...  2022061304\nSaving Prediction Map:  2022-06-13 (Time: 4)\nPlotting...  2022061305\nSaving Prediction Map:  2022-06-13 (Time: 5)\nPlotting...  2022061306\nSaving Prediction Map:  2022-06-13 (Time: 6)\nPlotting...  2022061307\nSaving Prediction Map:  2022-06-13 (Time: 7)\nPlotting...  2022061308\nSaving Prediction Map:  2022-06-13 (Time: 8)\nPlotting...  2022061309\nSaving Prediction Map:  2022-06-13 (Time: 9)\nPlotting...  2022061310\nSaving Prediction Map:  2022-06-13 (Time: 10)\nPlotting...  2022061311\nSaving Prediction Map:  2022-06-13 (Time: 11)\nPlotting...  2022061212\nSaving Prediction Map:  2022-06-12 (Time: 12)\nPlotting...  2022061213\nSaving Prediction Map:  2022-06-12 (Time: 13)\nPlotting...  2022061214\nSaving Prediction Map:  2022-06-12 (Time: 14)\nPlotting...  2022061215\nSaving Prediction Map:  2022-06-12 (Time: 15)\nPlotting...  2022061216\nSaving Prediction Map:  2022-06-12 (Time: 16)\nPlotting...  2022061217\nSaving Prediction Map:  2022-06-12 (Time: 17)\nPlotting...  2022061218\nSaving Prediction Map:  2022-06-12 (Time: 18)\nPlotting...  2022061219\nSaving Prediction Map:  2022-06-12 (Time: 19)\nPlotting...  2022061220\nSaving Prediction Map:  2022-06-12 (Time: 20)\nPlotting...  2022061221\nSaving Prediction Map:  2022-06-12 (Time: 21)\nPlotting...  2022061222\nSaving Prediction Map:  2022-06-12 (Time: 22)\nPlotting...  2022061223\nSaving Prediction Map:  2022-06-12 (Time: 23)\nPlotting...  2022061200\nSaving Prediction Map:  2022-06-12 (Time: 0)\nPlotting...  2022061201\nSaving Prediction Map:  2022-06-12 (Time: 1)\nPlotting...  2022061202\nSaving Prediction Map:  2022-06-12 (Time: 2)\nPlotting...  2022061203\nSaving Prediction Map:  2022-06-12 (Time: 3)\nPlotting...  2022061204\nSaving Prediction Map:  2022-06-12 (Time: 4)\nPlotting...  2022061205\nSaving Prediction Map:  2022-06-12 (Time: 5)\nPlotting...  2022061206\nSaving Prediction Map:  2022-06-12 (Time: 6)\nPlotting...  2022061207\nSaving Prediction Map:  2022-06-12 (Time: 7)\nPlotting...  2022061208\nSaving Prediction Map:  2022-06-12 (Time: 8)\nPlotting...  2022061209\nSaving Prediction Map:  2022-06-12 (Time: 9)\nPlotting...  2022061210\nSaving Prediction Map:  2022-06-12 (Time: 10)\nPlotting...  2022061211\nSaving Prediction Map:  2022-06-12 (Time: 11)\nPlotting...  2022061112\nSaving Prediction Map:  2022-06-11 (Time: 12)\nPlotting...  2022061113\nSaving Prediction Map:  2022-06-11 (Time: 13)\nPlotting...  2022061114\nSaving Prediction Map:  2022-06-11 (Time: 14)\nPlotting...  2022061115\nSaving Prediction Map:  2022-06-11 (Time: 15)\nPlotting...  2022061116\nSaving Prediction Map:  2022-06-11 (Time: 16)\nPlotting...  2022061117\nSaving Prediction Map:  2022-06-11 (Time: 17)\nPlotting...  2022061118\nSaving Prediction Map:  2022-06-11 (Time: 18)\nPlotting...  2022061119\nSaving Prediction Map:  2022-06-11 (Time: 19)\nPlotting...  2022061120\nSaving Prediction Map:  2022-06-11 (Time: 20)\nPlotting...  2022061121\nSaving Prediction Map:  2022-06-11 (Time: 21)\nPlotting...  2022061122\nSaving Prediction Map:  2022-06-11 (Time: 22)\nPlotting...  2022061123\nSaving Prediction Map:  2022-06-11 (Time: 23)\nPlotting...  2022061100\nSaving Prediction Map:  2022-06-11 (Time: 0)\nPlotting...  2022061101\nSaving Prediction Map:  2022-06-11 (Time: 1)\nPlotting...  2022061102\nSaving Prediction Map:  2022-06-11 (Time: 2)\nPlotting...  2022061103\nSaving Prediction Map:  2022-06-11 (Time: 3)\nPlotting...  2022061104\nSaving Prediction Map:  2022-06-11 (Time: 4)\nPlotting...  2022061105\nSaving Prediction Map:  2022-06-11 (Time: 5)\nPlotting...  2022061106\nSaving Prediction Map:  2022-06-11 (Time: 6)\nPlotting...  2022061107\nSaving Prediction Map:  2022-06-11 (Time: 7)\nPlotting...  2022061108\nSaving Prediction Map:  2022-06-11 (Time: 8)\nPlotting...  2022061109\nSaving Prediction Map:  2022-06-11 (Time: 9)\nPlotting...  2022061110\nSaving Prediction Map:  2022-06-11 (Time: 10)\nPlotting...  2022061111\nSaving Prediction Map:  2022-06-11 (Time: 11)\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061100.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061101.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061102.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061103.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061104.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061105.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061106.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061107.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061108.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061109.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061110.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061111.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061112.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061113.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061114.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061115.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061116.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061117.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061118.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061119.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061120.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061121.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061122.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061123.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061200.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061201.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061202.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061203.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061204.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061205.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061206.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061207.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061208.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061209.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061210.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061211.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061212.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061213.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061214.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061215.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061216.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061217.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061218.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061219.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061220.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061221.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061222.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061223.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061300.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061301.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061302.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061303.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061304.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061305.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061306.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061307.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061308.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061309.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061310.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061311.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061312.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061313.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061314.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061315.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061316.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061317.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061318.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061319.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061320.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061321.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061322.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061323.tif\nTraceback (most recent call last):\n  File \"prediction_maps.py\", line 163, in <module>\n    imageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/imageio/v2.py\", line 331, in mimwrite\n    return file.write(ims, **kwargs)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/imageio/core/legacy_plugin_wrapper.py\", line 216, in write\n    writer.append_data(ndimage)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/imageio/core/format.py\", line 589, in append_data\n    return self._append_data(im, total_meta)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/imageio/plugins/ffmpeg.py\", line 597, in _append_data\n    raise ValueError(\"All images in a movie should have same size\")\nValueError: All images in a movie should have same size\n",
  "history_begin_time" : 1655301328450,
  "history_end_time" : 1655306726078,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "W9qIf3QsS2nC",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(\"/groups/ESS/aalnaim/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(\"/groups/ESS/aalnaim/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ndef add_colorbar(fig, axes):\n  \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = fig.colorbar(sm, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05, ax=axes)\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n    \nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n    \nadd_colorbar(fig, ax1)\nadd_colorbar(fig, ax2)\nadd_colorbar(fig, ax3)\nadd_colorbar(fig, ax4) \n    \n    \nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n       \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n    \n\n\n",
  "history_output" : "Plotting...  2022061312\nSaving Prediction Map:  2022-06-13 (Time: 12)\nPlotting...  2022061313\nSaving Prediction Map:  2022-06-13 (Time: 13)\nPlotting...  2022061314\nSaving Prediction Map:  2022-06-13 (Time: 14)\nPlotting...  2022061315\nSaving Prediction Map:  2022-06-13 (Time: 15)\nPlotting...  2022061316\nSaving Prediction Map:  2022-06-13 (Time: 16)\nPlotting...  2022061317\nSaving Prediction Map:  2022-06-13 (Time: 17)\nPlotting...  2022061318\n",
  "history_begin_time" : 1655299915664,
  "history_end_time" : 1655301241322,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "0Ni4U8FbQHlf",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(\"/groups/ESS/aalnaim/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(\"/groups/ESS/aalnaim/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\ndef add_colorbar(fig, axes):\n  \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = fig.colorbar(sm, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05, ax=axes)\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    add_colorbar(fig, ax1)\n    add_colorbar(fig, ax2)\n    add_colorbar(fig, ax3)\n    add_colorbar(fig, ax4)    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n    \n\n\n",
  "history_output" : "Plotting...  2022061312\nSaving Prediction Map:  2022-06-13 (Time: 12)\nPlotting...  2022061313\nSaving Prediction Map:  2022-06-13 (Time: 13)\nPlotting...  2022061314\nSaving Prediction Map:  2022-06-13 (Time: 14)\nPlotting...  2022061315\nSaving Prediction Map:  2022-06-13 (Time: 15)\nPlotting...  2022061316\nSaving Prediction Map:  2022-06-13 (Time: 16)\nPlotting...  2022061317\n",
  "history_begin_time" : 1655280159331,
  "history_end_time" : 1655301109378,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "tX0zubQfQBeZ",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\ndef add_colorbar(fig, axes):\n  \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = fig.colorbar(sm, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05, ax=axes)\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    add_colorbar(fig, ax1)\n    add_colorbar(fig, ax2)\n    add_colorbar(fig, ax3)\n    add_colorbar(fig, ax4)    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n    \n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\nPlotting...  2022061013\nSaving Prediction Map:  2022-06-10 (Time: 13)\nPlotting...  2022061014\nSaving Prediction Map:  2022-06-10 (Time: 14)\nPlotting...  2022061015\nSaving Prediction Map:  2022-06-10 (Time: 15)\nPlotting...  2022061016\nSaving Prediction Map:  2022-06-10 (Time: 16)\nPlotting...  2022061017\nSaving Prediction Map:  2022-06-10 (Time: 17)\nPlotting...  2022061018\nSaving Prediction Map:  2022-06-10 (Time: 18)\nPlotting...  2022061019\nSaving Prediction Map:  2022-06-10 (Time: 19)\nPlotting...  2022061020\n",
  "history_begin_time" : 1655266820610,
  "history_end_time" : 1655275674812,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "Vgg8cUeFncZL",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\ndef add_colorbar(fig, axes):\n  \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = fig.colorbar(sm, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05, ax=axes)\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    add_colorbar(fig, ax1)\n    add_colorbar(fig, ax2)\n    add_colorbar(fig, ax3)\n    add_colorbar(fig, ax4)    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n    \n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655265618498,
  "history_end_time" : 1655275674212,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "CvVc0GRDzePg",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\ndef add_colorbar(fig, axes):\n  \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = fig.colorbar(predictionMap, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05, ax=axes)\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    add_colorbar(fig, ax1)\n    add_colorbar(fig, ax2)\n    add_colorbar(fig, ax3)\n    add_colorbar(fig, ax4)    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n    \n\n\n",
  "history_output" : "Plotting...  2022061012\nTraceback (most recent call last):\n  File \"prediction_maps.py\", line 129, in <module>\n    add_colorbar(fig, ax1)\n  File \"prediction_maps.py\", line 57, in add_colorbar\n    cb = fig.colorbar(predictionMap, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/figure.py\", line 1158, in colorbar\n    cb = cbar.Colorbar(cax, mappable, **cb_kw)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/colorbar.py\", line 394, in __init__\n    if mappable.get_array() is not None:\nAttributeError: 'AxesSubplot' object has no attribute 'get_array'\n",
  "history_begin_time" : 1655264966913,
  "history_end_time" : 1655275673660,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "Ed5bY0ARoZYT",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\ndef add_colorbar(fig, axes):\n  \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = fig.colorbar(predictionMap, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05, ax=ax)\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    add_colorbar(fig, ax1)\n    add_colorbar(fig, ax2)\n    add_colorbar(fig, ax3)\n    add_colorbar(fig, ax4)    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n    \n\n\n",
  "history_output" : "Plotting...  2022061012\nTraceback (most recent call last):\n  File \"prediction_maps.py\", line 129, in <module>\n    add_colorbar(fig, ax1)\n  File \"prediction_maps.py\", line 58, in add_colorbar\n    spacing='uniform', drawedges=True, pad=0.05, ax=ax)\nNameError: name 'ax' is not defined\n",
  "history_begin_time" : 1655264807538,
  "history_end_time" : 1655275673214,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "gjh7gY4dgV4s",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\ndef add_colorbar(fig):\n  \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05, ax=fig.get_axes())\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    add_colorbar(fig)\n\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n    \n\n\n",
  "history_output" : "Plotting...  2022061012\nTraceback (most recent call last):\n  File \"prediction_maps.py\", line 129, in <module>\n    add_colorbar(fig)\n  File \"prediction_maps.py\", line 57, in add_colorbar\n    cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/pyplot.py\", line 2088, in colorbar\n    ret = gcf().colorbar(mappable, cax=cax, ax=ax, **kw)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/figure.py\", line 1158, in colorbar\n    cb = cbar.Colorbar(cax, mappable, **cb_kw)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/colorbar.py\", line 394, in __init__\n    if mappable.get_array() is not None:\nAttributeError: 'AxesSubplot' object has no attribute 'get_array'\n",
  "history_begin_time" : 1655264491332,
  "history_end_time" : 1655275672628,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "vZGdebI09tZI",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\ndef add_colorbar(cmap, axes):\n  \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05, ax=axes)\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    add_colorbar(cmap, ax1)\n    add_colorbar(cmap, ax2)\n    add_colorbar(cmap, ax3)\n    add_colorbar(cmap, ax4)\n\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n    \n\n\n",
  "history_output" : "Plotting...  2022061012\nTraceback (most recent call last):\n  File \"prediction_maps.py\", line 129, in <module>\n    add_colorbar(cmap, ax1)\n  File \"prediction_maps.py\", line 57, in add_colorbar\n    cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/pyplot.py\", line 2088, in colorbar\n    ret = gcf().colorbar(mappable, cax=cax, ax=ax, **kw)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/figure.py\", line 1158, in colorbar\n    cb = cbar.Colorbar(cax, mappable, **cb_kw)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/colorbar.py\", line 394, in __init__\n    if mappable.get_array() is not None:\nAttributeError: 'AxesSubplot' object has no attribute 'get_array'\n",
  "history_begin_time" : 1655264191520,
  "history_end_time" : 1655275672131,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "d3fl7HmjNhpr",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n    \n\n\n",
  "history_output" : "Plotting...  2022061012\nprediction_maps.py:119: MatplotlibDeprecationWarning: Starting from Matplotlib 3.6, colorbar() will steal space from the mappable's axes, rather than from the current axes, to place the colorbar.  To silence this warning, explicitly pass the 'ax' argument to colorbar().\n  cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),\nTraceback (most recent call last):\n  File \"prediction_maps.py\", line 119, in <module>\n    cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/pyplot.py\", line 2088, in colorbar\n    ret = gcf().colorbar(mappable, cax=cax, ax=ax, **kw)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/figure.py\", line 1158, in colorbar\n    cb = cbar.Colorbar(cax, mappable, **cb_kw)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/colorbar.py\", line 394, in __init__\n    if mappable.get_array() is not None:\nAttributeError: 'AxesSubplot' object has no attribute 'get_array'\n",
  "history_begin_time" : 1655263695117,
  "history_end_time" : 1655275671464,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "TINugq9aB6Fa",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n\tsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n    \n\n\n",
  "history_output" : "  File \"prediction_maps.py\", line 117\n    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n                                                   ^\nTabError: inconsistent use of tabs and spaces in indentation\n",
  "history_begin_time" : 1655263617007,
  "history_end_time" : 1655275671007,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "CxSza2JazlTR",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    norm = mpl.colors.Normalize(vmin=0,vmax=80)\n\n\tsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n    \n    cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), \tlocation='bottom', format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n    \n\n\n",
  "history_output" : null,
  "history_begin_time" : 1655263557687,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : null
},{
  "history_id" : "VMCpTPTNUYcl",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n    \n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\nPlotting...  2022061013\nSaving Prediction Map:  2022-06-10 (Time: 13)\nPlotting...  2022061014\nSaving Prediction Map:  2022-06-10 (Time: 14)\nPlotting...  2022061015\nSaving Prediction Map:  2022-06-10 (Time: 15)\nPlotting...  2022061016\nSaving Prediction Map:  2022-06-10 (Time: 16)\nPlotting...  2022061017\nSaving Prediction Map:  2022-06-10 (Time: 17)\nPlotting...  2022061018\nSaving Prediction Map:  2022-06-10 (Time: 18)\nPlotting...  2022061019\nSaving Prediction Map:  2022-06-10 (Time: 19)\nPlotting...  2022061020\n",
  "history_begin_time" : 1655255475406,
  "history_end_time" : 1655263587731,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "1VGMtDtNEnUg",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n    \n\n\n",
  "history_output" : null,
  "history_begin_time" : 1655255448990,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : null
},{
  "history_id" : "IC9c1yL8KVaE",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=3, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655240382149,
  "history_end_time" : 1655259490137,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "WhVHII1JcF3k",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=2, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=400, cmap=cmap, \n                   linewidths=2, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    \n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655240074660,
  "history_end_time" : 1655259489401,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "mzkXkGBDp6so",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\nmpl.rcParams['axes.linewidth'] = 2\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=355, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=355, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655239278550,
  "history_end_time" : 1655259488319,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "oH7Sp5wvORaZ",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=355, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=355, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.tight_layout()\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655239003214,
  "history_end_time" : 1655259487803,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "54x8rocvNwLR",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\ngs = gridspec.GridSpec(2, 2, width_ratios=[1, 1]) \n\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=455, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=455, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655236640876,
  "history_end_time" : 1655259487154,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "6aM3pOyG0vA9",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\ngs = gridspec.GridSpec(2, 2, width_ratios=[1, 1]) \n\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=255, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=255, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655235775968,
  "history_end_time" : 1655259486636,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "RZYEu8XEq7K7",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\ngs = gridspec.GridSpec(2, 2, width_ratios=[1, 1]) \n\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=255, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=255, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 48, in <module>\n    gs = gridspec.GridSpec(2, 2, width_ratios=[1, 1]) \nNameError: name 'gridspec' is not defined\n",
  "history_begin_time" : 1655235251908,
  "history_end_time" : 1655259486085,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "jA0AMRRxBWZK",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\nplt.gca().set_aspect('equal', adjustable='datalim')\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=155, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=155, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655234913611,
  "history_end_time" : 1655259485491,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "bdRQQCyaqYwQ",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 65\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=95, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=95, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle)\n    ax2.set_title(AirNowPlotTitle)\n    ax3.set_title(cmaqActualPlotTitle)\n    ax4.set_title(AirNowActualPlotTitle)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655234286345,
  "history_end_time" : 1655259498092,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "GWIQbsUIdB5b",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 35\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(80, 50))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=95, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=95, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle, fontsize= 35)\n    ax2.set_title(AirNowPlotTitle, fontsize= 35)\n    ax3.set_title(cmaqActualPlotTitle, fontsize= 35)\n    ax4.set_title(AirNowActualPlotTitle, fontsize= 35)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655233992740,
  "history_end_time" : 1655259497227,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "mpA4FWnwKInZ",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 35\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(40, 35))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=95, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=95, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle, fontsize= 35)\n    ax2.set_title(AirNowPlotTitle, fontsize= 35)\n    ax3.set_title(cmaqActualPlotTitle, fontsize= 35)\n    ax4.set_title(AirNowActualPlotTitle, fontsize= 35)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655233392181,
  "history_end_time" : 1655259496595,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "QumKJnJJliwp",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 35\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(40, 35))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1, figsize=(40, 35))\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2, figsize=(40, 35))\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=95, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\", figsize=(40, 35))\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3, figsize=(40, 35))\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4, figsize=(40, 35))\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=95, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\", figsize=(40, 35))\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle, fontsize= 35)\n    ax2.set_title(AirNowPlotTitle, fontsize= 35)\n    ax3.set_title(cmaqActualPlotTitle, fontsize= 35)\n    ax4.set_title(AirNowActualPlotTitle, fontsize= 35)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655233084395,
  "history_end_time" : 1655259496092,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "q2LPJAboQFkQ",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 35\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(40, 30))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1, figsize=(35, 30))\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2, figsize=(35, 30))\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\", figsize=(35, 30))\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3, figsize=(35, 30))\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4, figsize=(35, 30))\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\", figsize=(35, 30))\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle, fontsize= 35)\n    ax2.set_title(AirNowPlotTitle, fontsize= 35)\n    ax3.set_title(cmaqActualPlotTitle, fontsize= 35)\n    ax4.set_title(AirNowActualPlotTitle, fontsize= 35)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655232669026,
  "history_end_time" : 1655259494694,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "P6yYncI9N0qJ",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 35\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(35, 25))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1, figsize=(30, 25))\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2, figsize=(30, 25))\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\", figsize=(30, 25))\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3, figsize=(30, 25))\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4, figsize=(30, 25))\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\", figsize=(30, 25))\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle, fontsize= 35)\n    ax2.set_title(AirNowPlotTitle, fontsize= 35)\n    ax3.set_title(cmaqActualPlotTitle, fontsize= 35)\n    ax4.set_title(AirNowActualPlotTitle, fontsize= 35)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655230503724,
  "history_end_time" : 1655259494232,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "QsMjsLPAANtK",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 35\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(25, 20))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1, figsize=(30, 25))\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2, figsize=(30, 25))\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\", figsize=(30, 25))\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3, figsize=(30, 25))\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4, figsize=(30, 25))\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\", figsize=(30, 25))\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle, fontsize= 35)\n    ax2.set_title(AirNowPlotTitle, fontsize= 35)\n    ax3.set_title(cmaqActualPlotTitle, fontsize= 35)\n    ax4.set_title(AirNowActualPlotTitle, fontsize= 35)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655230175685,
  "history_end_time" : 1655259493761,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "KvLph0FpNcOc",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 35\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(25, 20))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1, figsize=(20, 18))\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2, figsize=(20, 18))\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\", figsize=(20, 18))\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3, figsize=(20, 18))\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4, figsize=(20, 18))\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\", figsize=(20, 18))\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle, fontsize= 35)\n    ax2.set_title(AirNowPlotTitle, fontsize= 35)\n    ax3.set_title(cmaqActualPlotTitle, fontsize= 35)\n    ax4.set_title(AirNowActualPlotTitle, fontsize= 35)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655229820868,
  "history_end_time" : 1655259493201,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "DhUhu3T0zfTl",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 35\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(45, 18))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle, fontsize= 35)\n    ax2.set_title(AirNowPlotTitle, fontsize= 35)\n    ax3.set_title(cmaqActualPlotTitle, fontsize= 35)\n    ax4.set_title(AirNowActualPlotTitle, fontsize= 35)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655229538054,
  "history_end_time" : 1655229747660,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "S1htxOwVqf3Y",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 35\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(35, 15))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle, fontsize= 35)\n    ax2.set_title(AirNowPlotTitle, fontsize= 35)\n    ax3.set_title(cmaqActualPlotTitle, fontsize= 35)\n    ax4.set_title(AirNowActualPlotTitle, fontsize= 35)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655229243236,
  "history_end_time" : 1655229747092,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "vYELyGA9Gp0o",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 35\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(35, 15))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle, fontsize= 35)\n    ax2.set_title(AirNowPlotTitle, fontsize= 35)\n    ax3.set_title(cmaqActualPlotTitle, fontsize= 35)\n    ax4.set_title(AirNowActualPlotTitle, fontsize= 35)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n\n\n\n\n",
  "history_output" : null,
  "history_begin_time" : 1655228926038,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : null
},{
  "history_id" : "lDUvA8D8fX4z",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 35\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(35, 45))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle, fontsize= 35)\n    ax2.set_title(AirNowPlotTitle, fontsize= 35)\n    ax3.set_title(cmaqActualPlotTitle, fontsize= 35)\n    ax4.set_title(AirNowActualPlotTitle, fontsize= 35)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n    \n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061012.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (3500, 4500) to (3504, 4512) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nGenerating prediction.gif ...\nffmpeg version 4.2.2 Copyright (c) 2000-2019 the FFmpeg developers\n  built with gcc 9.3.0 (GCC)\n  configuration: --prefix=/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0/ffmpeg-4.2.2-ey --enable-pic --cc=/opt/sw/spack/0.16.0/lib/spack/env/gcc/gcc --cxx=/opt/sw/spack/0.16.0/lib/spack/env/gcc/g++ --enable-libxcb --enable-libxcb-shape --enable-libxcb-shm --enable-libxcb-xfixes --enable-xlib --disable-libfontconfig --disable-libfreetype --disable-libfribidi --enable-bzlib --enable-libmp3lame --enable-libopenjpeg --disable-libopus --enable-libspeex --enable-libvorbis --enable-avresample --enable-openssl --enable-shared --disable-libzmq --disable-libssh --disable-libwebp --disable-lzma --disable-libsnappy --enable-sdl2 --enable-libaom\n  libavutil      56. 31.100 / 56. 31.100\n  libavcodec     58. 54.100 / 58. 54.100\n  libavformat    58. 29.100 / 58. 29.100\n  libavdevice    58.  8.100 / 58.  8.100\n  libavfilter     7. 57.100 /  7. 57.100\n  libavresample   4.  0.  0 /  4.  0.  0\n  libswscale      5.  5.100 /  5.  5.100\n  libswresample   3.  5.100 /  3.  5.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/groups/ESS/aalnaim/cmaq/prediction.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:00.10, start: 0.000000, bitrate: 27983 kb/s\n    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 3504x4512, 27919 kb/s, 10 fps, 10 tbr, 10240 tbn, 20 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\n",
  "history_begin_time" : 1655226215601,
  "history_end_time" : 1655228956071,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "3t61HLKhIKkg",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 35\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(55, 45))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle, fontsize= 35)\n    ax2.set_title(AirNowPlotTitle, fontsize= 35)\n    ax3.set_title(cmaqActualPlotTitle, fontsize= 35)\n    ax4.set_title(AirNowActualPlotTitle, fontsize= 35)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n    \n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655225809130,
  "history_end_time" : 1655229746395,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "BHDHXN3b4vaD",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 35\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(35, 25))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle, fontsize= 35)\n    ax2.set_title(AirNowPlotTitle, fontsize= 35)\n    ax3.set_title(cmaqActualPlotTitle, fontsize= 35)\n    ax4.set_title(AirNowActualPlotTitle, fontsize= 35)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n    \n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655225594521,
  "history_end_time" : 1655229745910,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "1R6daTOKnP4r",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(20, 18))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle, fontsize= 35)\n    ax2.set_title(AirNowPlotTitle, fontsize= 35)\n    ax3.set_title(cmaqActualPlotTitle, fontsize= 35)\n    ax4.set_title(AirNowActualPlotTitle, fontsize= 35)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n    \n\n\n\n\n",
  "history_output" : "Plotting...  2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n",
  "history_begin_time" : 1655225053830,
  "history_end_time" : 1655229745413,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "EkrdX5jV6XMg",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\ncmaq_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_actual = cmaq_actual['YYYYMMDDHH'].unique()\ndfs_actual = dict(tuple(cmaq_actual.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2, figsize=(20, 18))\n\ntime_ = time_[:1]\n\nfor t in time_:\n    \n    print(\"Plotting... \", t)\n    \n    # CMAQ prediction dataframe    \n    df = dfs[t]\n    \n    # AirNow observation dataframe\n    df_Airnow = dfs_Airnow[t]\n\n    # CMAQ actual dataframe\n    df_actual = dfs_actual[t]\n    \n    # Setting up GeoPandas df from [CMAQ prediction dataframe]    \n    predictionMapData = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    predictionMapData = predictionMapData.set_crs(\"EPSG:4326\")\n\n    # Setting up GeoPandas df from [AirNow observation dataframe]\n    predictionAirnowData = gpd.GeoDataFrame(\n        df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n    predictionAirnowData = predictionAirnowData.set_crs(\"EPSG:4326\")\n    \n    # Setting up GeoPandas df from [CMAQ actual dataframe]\n    cmaqActualData = gpd.GeoDataFrame(\n        df_actual, geometry=gpd.points_from_xy(df_actual.Longitude, df_actual.Latitude))\n    cmaqActualData = cmaqActualData.set_crs(\"EPSG:4326\")\n\n\n    ###### Plots ROW 1 ######\n    \n    # Plotting CMAQ prediction Map     \n    predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n\n    # Plotting CMAQ predictions base layer for AirNow observations     \n    predictionMap = predictionMapData.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax2)\n    \n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=predictionMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    ###### Plots ROW 2 ######\n    \n    # Plotting Actual CMAQ Map     \n    cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n        cmap=cmap, vmin=0,vmax=80, ax=ax3)\n    \n    # Plotting Actual CMAQ base layer for AirNow observations     \n    actualCmaqMap = cmaqActualData.plot(column='CMAQ12KM_O3(ppb)', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax4)\n    \n\n    # Plotting AirNow observation layer\n    predictionAirnowData.plot(ax=actualCmaqMap, column='AirNOW_O3', \n                   marker='o', markersize=65, cmap=cmap, \n                   linewidths=1, edgecolors=\"black\")\n    \n    \n    # cb = plt.colorbar(predictionMap, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    predictionMapPlotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    AirNowPlotTitle = datetime.strftime(dateObj, \"AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    cmaqActualPlotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    AirNowActualPlotTitle = datetime.strftime(dateObj, \"Actual AirNow Stations: %Y-%m-%d (Time: %-H)\")\n    ax1.set_title(predictionMapPlotTitle, fontsize= 35)\n    ax2.set_title(AirNowPlotTitle, fontsize= 35)\n    ax3.set_title(cmaqActualPlotTitle, fontsize= 35)\n    ax4.set_title(AirNowActualPlotTitle, fontsize= 35)\n    print(\"Saving Prediction Map: \", predictionMapPlotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n    \n\n\n\n\n\n",
  "history_output" : null,
  "history_begin_time" : 1655224988126,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : null
},{
  "history_id" : "Mti3KBzYvGJO",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\n#df_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\ntime_ = time_[:3]\n\nfig, ax = plt.subplots(figsize=(20, 18))\n\nfor t in time_:\n    print(t)\n    df = dfs[t]\n    \n    df_Airnow = dfs_Airnow[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    predDf = gdf.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax)\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, linewidths=1, edgecolors=\"black\")\n    \n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving Prediction Map: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n\n",
  "history_output" : "2022061012\nSaving Prediction Map:  2022-06-10 (Time: 12)\n2022061013\nSaving Prediction Map:  2022-06-10 (Time: 13)\n2022061014\nSaving Prediction Map:  2022-06-10 (Time: 14)\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061012.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061013.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_2022061014.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nGenerating prediction.gif ...\nffmpeg version 4.2.2 Copyright (c) 2000-2019 the FFmpeg developers\n  built with gcc 9.3.0 (GCC)\n  configuration: --prefix=/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0/ffmpeg-4.2.2-ey --enable-pic --cc=/opt/sw/spack/0.16.0/lib/spack/env/gcc/gcc --cxx=/opt/sw/spack/0.16.0/lib/spack/env/gcc/g++ --enable-libxcb --enable-libxcb-shape --enable-libxcb-shm --enable-libxcb-xfixes --enable-xlib --disable-libfontconfig --disable-libfreetype --disable-libfribidi --enable-bzlib --enable-libmp3lame --enable-libopenjpeg --disable-libopus --enable-libspeex --enable-libvorbis --enable-avresample --enable-openssl --enable-shared --disable-libzmq --disable-libssh --disable-libwebp --disable-lzma --disable-libsnappy --enable-sdl2 --enable-libaom\n  libavutil      56. 31.100 / 56. 31.100\n  libavcodec     58. 54.100 / 58. 54.100\n  libavformat    58. 29.100 / 58. 29.100\n  libavdevice    58.  8.100 / 58.  8.100\n  libavfilter     7. 57.100 /  7. 57.100\n  libavresample   4.  0.  0 /  4.  0.  0\n  libswscale      5.  5.100 /  5.  5.100\n  libswresample   3.  5.100 /  3.  5.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/groups/ESS/aalnaim/cmaq/prediction.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:00.30, start: 0.000000, bitrate: 9416 kb/s\n    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 2000x1808, 9392 kb/s, 10 fps, 10 tbr, 10240 tbn, 20 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\n",
  "history_begin_time" : 1655217759724,
  "history_end_time" : 1655225018173,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "nIP0bmvjjzQU",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\n#df_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\ntime_ = time_[:3]\n\nfig, ax = plt.subplots(figsize=(20, 18))\n\nfor t in time_:\n    print(t)\n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    predDf = gdf.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax)\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, linewidths=1, edgecolors=\"black\")\n    \n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving Prediction Map: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n\n",
  "history_output" : "2022061012\nTraceback (most recent call last):\n  File \"prediction_maps.py\", line 62, in <module>\n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\nNameError: name 'df_Airnow' is not defined\n",
  "history_begin_time" : 1655217659455,
  "history_end_time" : 1655223925074,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "hjvhxzgoks6M",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\n#df_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\ntime_ = time_[:3]\n\nfig, ax = plt.subplots(figsize=(20, 18))\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    predDf = gdf.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax)\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, linewidths=1, edgecolors=\"black\")\n    \n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving Prediction Map: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1655217624171,
  "history_end_time" : 1655223924380,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "ilGcoZd5n5RS",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\n#df_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\ntime_ = time_[:3]\n\nfig, ax = plt.subplots(2,2, figsize=(20, 18))\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    predDf = gdf.plot(column='prediction', legend=False,\n         cmap=cmap, vmin=0,vmax=80, ax=ax)\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, linewidths=1, edgecolors=\"black\")\n    \n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving Prediction Map: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n\n",
  "history_output" : "Running",
  "history_begin_time" : 1655217592017,
  "history_end_time" : 1655217616702,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "Jjo9SQWPptCe",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\n#df_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\ntime_ = time_[:3]\n\nfig, ax = plt.subplots(1,1)\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80, ax=ax)\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving Prediction Map: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 62, in <module>\n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\nNameError: name 'df_Airnow' is not defined\n",
  "history_begin_time" : 1655217533845,
  "history_end_time" : 1655217616215,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "uPG3yW3GZ0wt",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\n#df_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\ntime_ = time_[:3]\n\nfig, (ax1, ax2) = plt.subplots(2,2)\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving Prediction Map: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 56, in <module>\n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py\", line 950, in __call__\n    return plot_dataframe(data, *args, **kwargs)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py\", line 667, in plot_dataframe\n    ax.set_aspect(1 / np.cos(y_coord * np.pi / 180))\nAttributeError: 'numpy.ndarray' object has no attribute 'set_aspect'\n",
  "history_begin_time" : 1655216905924,
  "history_end_time" : 1655217145672,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "VK2aKdFZoNQ2",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\n#df_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\ntime_ = time_[:3]\n\nfig, (ax1, ax2) = plt.subplots(2,2)\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80, ax=ax1)\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\", ax=ax2)\n    \n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving Prediction Map: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n\n",
  "history_output" : "  File \"prediction_maps.py\", line 65\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\", ax=ax2)\n                                                                                                                                            ^\nSyntaxError: keyword argument repeated\n",
  "history_begin_time" : 1655216803638,
  "history_end_time" : 1655217146548,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "EqAGNYcHRl9W",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\n#df_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\ntime_ = time_[:3]\n\nfig, (ax1, ax2) = plt.subplots(2,2)\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    predDf = ax1.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80)\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    ax2.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving Prediction Map: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 56, in <module>\n    predDf = ax1.plot(column='prediction', legend=False, figsize=(20, 18),\nAttributeError: 'numpy.ndarray' object has no attribute 'plot'\n",
  "history_begin_time" : 1655216714591,
  "history_end_time" : 1655217147125,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "UWEsMoTXouJc",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\n#df_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\ntime_ = time_[:3]\n\nfig, ax = plt.subplots(2,2)\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80, ax=ax )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving Prediction Map: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 58, in <module>\n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py\", line 950, in __call__\n    return plot_dataframe(data, *args, **kwargs)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py\", line 667, in plot_dataframe\n    ax.set_aspect(1 / np.cos(y_coord * np.pi / 180))\nAttributeError: 'numpy.ndarray' object has no attribute 'set_aspect'\n",
  "history_begin_time" : 1655216432967,
  "history_end_time" : 1655217147761,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "UZKKlDgYhiys",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\n#df_actual = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\nfig, ax = plt.subplots((2,1))\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80, ax=ax )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving Prediction Map: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_\" + str(t) + \".tif\")\n    \n\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Plots_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\n\n",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 43, in <module>\n    fig, ax = plt.subplots((2,1))\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/pyplot.py\", line 1435, in subplots\n    axs = fig.subplots(nrows=nrows, ncols=ncols, sharex=sharex, sharey=sharey,\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/figure.py\", line 896, in subplots\n    gs = self.add_gridspec(nrows, ncols, figure=self, **gridspec_kw)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/figure.py\", line 1395, in add_gridspec\n    gs = GridSpec(nrows=nrows, ncols=ncols, figure=self, **kwargs)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/gridspec.py\", line 385, in __init__\n    super().__init__(nrows, ncols,\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/gridspec.py\", line 49, in __init__\n    raise ValueError(\nValueError: Number of rows must be a positive integer, not (2, 1)\n",
  "history_begin_time" : 1655216296417,
  "history_end_time" : 1655217148402,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "LyVEuDu3Z1eY",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving Prediction Map: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t_Airnow), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving AirNow Map: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_\" + str(t_Airnow) + \".tif\")\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\nprint(\"Generating predctionAirNow.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\nprint(\"Done predctionAirNow.gif !!!\")\n\n",
  "history_output" : "Saving Prediction Map:  2022-06-10 (Time: 12)\nSaving Prediction Map:  2022-06-10 (Time: 13)\nSaving Prediction Map:  2022-06-10 (Time: 14)\nSaving Prediction Map:  2022-06-10 (Time: 15)\nSaving Prediction Map:  2022-06-10 (Time: 16)\nSaving Prediction Map:  2022-06-10 (Time: 17)\nSaving Prediction Map:  2022-06-10 (Time: 18)\nSaving Prediction Map:  2022-06-10 (Time: 19)\nSaving Prediction Map:  2022-06-10 (Time: 20)\nSaving Prediction Map:  2022-06-10 (Time: 21)\nSaving Prediction Map:  2022-06-10 (Time: 22)\nSaving Prediction Map:  2022-06-10 (Time: 23)\nSaving Prediction Map:  2022-06-10 (Time: 0)\nSaving Prediction Map:  2022-06-10 (Time: 1)\nSaving Prediction Map:  2022-06-10 (Time: 2)\nSaving Prediction Map:  2022-06-10 (Time: 3)\nSaving Prediction Map:  2022-06-10 (Time: 4)\nSaving Prediction Map:  2022-06-10 (Time: 5)\nSaving Prediction Map:  2022-06-10 (Time: 6)\nSaving Prediction Map:  2022-06-10 (Time: 7)\n/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\nSaving Prediction Map:  2022-06-10 (Time: 8)\nSaving Prediction Map:  2022-06-10 (Time: 9)\nSaving Prediction Map:  2022-06-10 (Time: 10)\nSaving Prediction Map:  2022-06-10 (Time: 11)\nSaving Prediction Map:  2022-06-09 (Time: 12)\nSaving Prediction Map:  2022-06-09 (Time: 13)\nSaving Prediction Map:  2022-06-09 (Time: 14)\nSaving Prediction Map:  2022-06-09 (Time: 15)\nSaving Prediction Map:  2022-06-09 (Time: 16)\nSaving Prediction Map:  2022-06-09 (Time: 17)\nSaving Prediction Map:  2022-06-09 (Time: 18)\nSaving Prediction Map:  2022-06-09 (Time: 19)\nSaving Prediction Map:  2022-06-09 (Time: 20)\nSaving Prediction Map:  2022-06-09 (Time: 21)\nSaving Prediction Map:  2022-06-09 (Time: 22)\nSaving Prediction Map:  2022-06-09 (Time: 23)\nSaving Prediction Map:  2022-06-09 (Time: 0)\nSaving Prediction Map:  2022-06-09 (Time: 1)\nSaving Prediction Map:  2022-06-09 (Time: 2)\nSaving Prediction Map:  2022-06-09 (Time: 3)\nSaving Prediction Map:  2022-06-09 (Time: 4)\nSaving Prediction Map:  2022-06-09 (Time: 5)\nSaving Prediction Map:  2022-06-09 (Time: 6)\nSaving Prediction Map:  2022-06-09 (Time: 7)\nSaving Prediction Map:  2022-06-09 (Time: 8)\nSaving Prediction Map:  2022-06-09 (Time: 9)\nSaving Prediction Map:  2022-06-09 (Time: 10)\nSaving Prediction Map:  2022-06-09 (Time: 11)\nSaving Prediction Map:  2022-06-08 (Time: 12)\nSaving Prediction Map:  2022-06-08 (Time: 13)\nSaving Prediction Map:  2022-06-08 (Time: 14)\nSaving Prediction Map:  2022-06-08 (Time: 15)\nSaving Prediction Map:  2022-06-08 (Time: 16)\nSaving Prediction Map:  2022-06-08 (Time: 17)\nSaving Prediction Map:  2022-06-08 (Time: 18)\nSaving Prediction Map:  2022-06-08 (Time: 19)\nSaving Prediction Map:  2022-06-08 (Time: 20)\nSaving Prediction Map:  2022-06-08 (Time: 21)\nSaving Prediction Map:  2022-06-08 (Time: 22)\nSaving Prediction Map:  2022-06-08 (Time: 23)\nSaving Prediction Map:  2022-06-08 (Time: 0)\nSaving Prediction Map:  2022-06-08 (Time: 1)\nSaving Prediction Map:  2022-06-08 (Time: 2)\nSaving Prediction Map:  2022-06-08 (Time: 3)\nSaving Prediction Map:  2022-06-08 (Time: 4)\nSaving Prediction Map:  2022-06-08 (Time: 5)\nSaving Prediction Map:  2022-06-08 (Time: 6)\nSaving Prediction Map:  2022-06-08 (Time: 7)\nSaving Prediction Map:  2022-06-08 (Time: 8)\nSaving Prediction Map:  2022-06-08 (Time: 9)\nSaving Prediction Map:  2022-06-08 (Time: 10)\nSaving Prediction Map:  2022-06-08 (Time: 11)\nSaving Prediction Map:  2022-06-07 (Time: 12)\nSaving Prediction Map:  2022-06-07 (Time: 13)\nSaving Prediction Map:  2022-06-07 (Time: 14)\nSaving Prediction Map:  2022-06-07 (Time: 15)\nSaving Prediction Map:  2022-06-07 (Time: 16)\nSaving Prediction Map:  2022-06-07 (Time: 17)\nSaving Prediction Map:  2022-06-07 (Time: 18)\nSaving Prediction Map:  2022-06-07 (Time: 19)\nSaving Prediction Map:  2022-06-07 (Time: 20)\nSaving Prediction Map:  2022-06-07 (Time: 21)\nSaving Prediction Map:  2022-06-07 (Time: 22)\nSaving Prediction Map:  2022-06-07 (Time: 23)\nSaving Prediction Map:  2022-06-07 (Time: 0)\nSaving Prediction Map:  2022-06-07 (Time: 1)\nSaving Prediction Map:  2022-06-07 (Time: 2)\nSaving Prediction Map:  2022-06-07 (Time: 3)\nSaving Prediction Map:  2022-06-07 (Time: 4)\nSaving Prediction Map:  2022-06-07 (Time: 5)\nSaving Prediction Map:  2022-06-07 (Time: 6)\nSaving Prediction Map:  2022-06-07 (Time: 7)\nSaving Prediction Map:  2022-06-07 (Time: 8)\nSaving Prediction Map:  2022-06-07 (Time: 9)\nSaving Prediction Map:  2022-06-07 (Time: 10)\nSaving Prediction Map:  2022-06-07 (Time: 11)\nSaving Prediction Map:  2022-06-06 (Time: 12)\nSaving Prediction Map:  2022-06-06 (Time: 13)\nSaving Prediction Map:  2022-06-06 (Time: 14)\nSaving Prediction Map:  2022-06-06 (Time: 15)\nSaving Prediction Map:  2022-06-06 (Time: 16)\nSaving Prediction Map:  2022-06-06 (Time: 17)\nSaving Prediction Map:  2022-06-06 (Time: 18)\nSaving Prediction Map:  2022-06-06 (Time: 19)\nSaving Prediction Map:  2022-06-06 (Time: 20)\nSaving Prediction Map:  2022-06-06 (Time: 21)\nSaving Prediction Map:  2022-06-06 (Time: 22)\nSaving Prediction Map:  2022-06-06 (Time: 23)\nSaving Prediction Map:  2022-06-06 (Time: 0)\nSaving Prediction Map:  2022-06-06 (Time: 1)\nSaving Prediction Map:  2022-06-06 (Time: 2)\nSaving Prediction Map:  2022-06-06 (Time: 3)\nSaving Prediction Map:  2022-06-06 (Time: 4)\nSaving Prediction Map:  2022-06-06 (Time: 5)\nSaving Prediction Map:  2022-06-06 (Time: 6)\nSaving Prediction Map:  2022-06-06 (Time: 7)\nSaving Prediction Map:  2022-06-06 (Time: 8)\nSaving Prediction Map:  2022-06-06 (Time: 9)\nSaving Prediction Map:  2022-06-06 (Time: 10)\nSaving Prediction Map:  2022-06-06 (Time: 11)\nSaving Prediction Map:  2022-06-05 (Time: 12)\nSaving Prediction Map:  2022-06-05 (Time: 13)\nSaving Prediction Map:  2022-06-05 (Time: 14)\nSaving Prediction Map:  2022-06-05 (Time: 15)\nSaving Prediction Map:  2022-06-05 (Time: 16)\nSaving Prediction Map:  2022-06-05 (Time: 17)\nSaving Prediction Map:  2022-06-05 (Time: 18)\nSaving Prediction Map:  2022-06-05 (Time: 19)\nSaving Prediction Map:  2022-06-05 (Time: 20)\nSaving Prediction Map:  2022-06-05 (Time: 21)\nSaving Prediction Map:  2022-06-05 (Time: 22)\nSaving Prediction Map:  2022-06-05 (Time: 23)\nSaving Prediction Map:  2022-06-05 (Time: 0)\nSaving Prediction Map:  2022-06-05 (Time: 1)\nSaving Prediction Map:  2022-06-05 (Time: 2)\nSaving Prediction Map:  2022-06-05 (Time: 3)\nSaving Prediction Map:  2022-06-05 (Time: 4)\nSaving Prediction Map:  2022-06-05 (Time: 5)\nSaving Prediction Map:  2022-06-05 (Time: 6)\nSaving Prediction Map:  2022-06-05 (Time: 7)\nSaving Prediction Map:  2022-06-05 (Time: 8)\nSaving Prediction Map:  2022-06-05 (Time: 9)\nSaving Prediction Map:  2022-06-05 (Time: 10)\nSaving Prediction Map:  2022-06-05 (Time: 11)\nSaving Prediction Map:  2022-06-04 (Time: 12)\nSaving Prediction Map:  2022-06-04 (Time: 13)\nSaving Prediction Map:  2022-06-04 (Time: 14)\nSaving Prediction Map:  2022-06-04 (Time: 15)\nSaving Prediction Map:  2022-06-04 (Time: 16)\nSaving Prediction Map:  2022-06-04 (Time: 17)\nSaving Prediction Map:  2022-06-04 (Time: 18)\nSaving Prediction Map:  2022-06-04 (Time: 19)\nSaving Prediction Map:  2022-06-04 (Time: 20)\nSaving Prediction Map:  2022-06-04 (Time: 21)\nSaving Prediction Map:  2022-06-04 (Time: 22)\nSaving Prediction Map:  2022-06-04 (Time: 23)\nSaving Prediction Map:  2022-06-04 (Time: 0)\nSaving Prediction Map:  2022-06-04 (Time: 1)\nSaving Prediction Map:  2022-06-04 (Time: 2)\nSaving Prediction Map:  2022-06-04 (Time: 3)\nSaving Prediction Map:  2022-06-04 (Time: 4)\nSaving Prediction Map:  2022-06-04 (Time: 5)\nSaving Prediction Map:  2022-06-04 (Time: 6)\nSaving Prediction Map:  2022-06-04 (Time: 7)\nSaving Prediction Map:  2022-06-04 (Time: 8)\nSaving Prediction Map:  2022-06-04 (Time: 9)\nSaving Prediction Map:  2022-06-04 (Time: 10)\nSaving Prediction Map:  2022-06-04 (Time: 11)\nSaving AirNow Map:  2022-06-10 (Time: 12)\nSaving AirNow Map:  2022-06-10 (Time: 13)\nSaving AirNow Map:  2022-06-10 (Time: 14)\nSaving AirNow Map:  2022-06-10 (Time: 15)\nSaving AirNow Map:  2022-06-10 (Time: 16)\nSaving AirNow Map:  2022-06-10 (Time: 17)\nSaving AirNow Map:  2022-06-10 (Time: 18)\nSaving AirNow Map:  2022-06-10 (Time: 19)\nSaving AirNow Map:  2022-06-10 (Time: 20)\nSaving AirNow Map:  2022-06-10 (Time: 21)\nSaving AirNow Map:  2022-06-10 (Time: 22)\nSaving AirNow Map:  2022-06-10 (Time: 23)\nSaving AirNow Map:  2022-06-10 (Time: 0)\nSaving AirNow Map:  2022-06-10 (Time: 1)\nSaving AirNow Map:  2022-06-10 (Time: 2)\nSaving AirNow Map:  2022-06-10 (Time: 3)\nSaving AirNow Map:  2022-06-10 (Time: 4)\nSaving AirNow Map:  2022-06-10 (Time: 5)\nSaving AirNow Map:  2022-06-10 (Time: 6)\nSaving AirNow Map:  2022-06-10 (Time: 7)\nSaving AirNow Map:  2022-06-10 (Time: 8)\nSaving AirNow Map:  2022-06-10 (Time: 9)\nSaving AirNow Map:  2022-06-10 (Time: 10)\nSaving AirNow Map:  2022-06-10 (Time: 11)\nSaving AirNow Map:  2022-06-09 (Time: 12)\nSaving AirNow Map:  2022-06-09 (Time: 13)\nSaving AirNow Map:  2022-06-09 (Time: 14)\nSaving AirNow Map:  2022-06-09 (Time: 15)\nSaving AirNow Map:  2022-06-09 (Time: 16)\nSaving AirNow Map:  2022-06-09 (Time: 17)\nSaving AirNow Map:  2022-06-09 (Time: 18)\nSaving AirNow Map:  2022-06-09 (Time: 19)\nSaving AirNow Map:  2022-06-09 (Time: 20)\nSaving AirNow Map:  2022-06-09 (Time: 21)\nSaving AirNow Map:  2022-06-09 (Time: 22)\nSaving AirNow Map:  2022-06-09 (Time: 23)\nSaving AirNow Map:  2022-06-09 (Time: 0)\nSaving AirNow Map:  2022-06-09 (Time: 1)\nSaving AirNow Map:  2022-06-09 (Time: 2)\nSaving AirNow Map:  2022-06-09 (Time: 3)\nSaving AirNow Map:  2022-06-09 (Time: 4)\nSaving AirNow Map:  2022-06-09 (Time: 5)\nSaving AirNow Map:  2022-06-09 (Time: 6)\nSaving AirNow Map:  2022-06-09 (Time: 7)\nSaving AirNow Map:  2022-06-09 (Time: 8)\nSaving AirNow Map:  2022-06-09 (Time: 9)\nSaving AirNow Map:  2022-06-09 (Time: 10)\nSaving AirNow Map:  2022-06-09 (Time: 11)\nSaving AirNow Map:  2022-06-08 (Time: 12)\nSaving AirNow Map:  2022-06-08 (Time: 13)\nSaving AirNow Map:  2022-06-08 (Time: 14)\nSaving AirNow Map:  2022-06-08 (Time: 15)\nSaving AirNow Map:  2022-06-08 (Time: 16)\nSaving AirNow Map:  2022-06-08 (Time: 17)\nSaving AirNow Map:  2022-06-08 (Time: 18)\nSaving AirNow Map:  2022-06-08 (Time: 19)\nSaving AirNow Map:  2022-06-08 (Time: 20)\nSaving AirNow Map:  2022-06-08 (Time: 21)\nSaving AirNow Map:  2022-06-08 (Time: 22)\nSaving AirNow Map:  2022-06-08 (Time: 23)\nSaving AirNow Map:  2022-06-08 (Time: 0)\nSaving AirNow Map:  2022-06-08 (Time: 1)\nSaving AirNow Map:  2022-06-08 (Time: 2)\nSaving AirNow Map:  2022-06-08 (Time: 3)\nSaving AirNow Map:  2022-06-08 (Time: 4)\nSaving AirNow Map:  2022-06-08 (Time: 5)\nSaving AirNow Map:  2022-06-08 (Time: 6)\nSaving AirNow Map:  2022-06-08 (Time: 7)\nSaving AirNow Map:  2022-06-08 (Time: 8)\nSaving AirNow Map:  2022-06-08 (Time: 9)\nSaving AirNow Map:  2022-06-08 (Time: 10)\nSaving AirNow Map:  2022-06-08 (Time: 11)\nSaving AirNow Map:  2022-06-07 (Time: 12)\nSaving AirNow Map:  2022-06-07 (Time: 13)\nSaving AirNow Map:  2022-06-07 (Time: 14)\nSaving AirNow Map:  2022-06-07 (Time: 15)\nSaving AirNow Map:  2022-06-07 (Time: 16)\nSaving AirNow Map:  2022-06-07 (Time: 17)\nSaving AirNow Map:  2022-06-07 (Time: 18)\nSaving AirNow Map:  2022-06-07 (Time: 19)\nSaving AirNow Map:  2022-06-07 (Time: 20)\nSaving AirNow Map:  2022-06-07 (Time: 21)\nSaving AirNow Map:  2022-06-07 (Time: 22)\nSaving AirNow Map:  2022-06-07 (Time: 23)\nSaving AirNow Map:  2022-06-07 (Time: 0)\nSaving AirNow Map:  2022-06-07 (Time: 1)\nSaving AirNow Map:  2022-06-07 (Time: 2)\nSaving AirNow Map:  2022-06-07 (Time: 3)\nSaving AirNow Map:  2022-06-07 (Time: 4)\nSaving AirNow Map:  2022-06-07 (Time: 5)\nSaving AirNow Map:  2022-06-07 (Time: 6)\nSaving AirNow Map:  2022-06-07 (Time: 7)\nSaving AirNow Map:  2022-06-07 (Time: 8)\nSaving AirNow Map:  2022-06-07 (Time: 9)\nSaving AirNow Map:  2022-06-07 (Time: 10)\nSaving AirNow Map:  2022-06-07 (Time: 11)\nSaving AirNow Map:  2022-06-06 (Time: 12)\nSaving AirNow Map:  2022-06-06 (Time: 13)\nSaving AirNow Map:  2022-06-06 (Time: 14)\nSaving AirNow Map:  2022-06-06 (Time: 15)\nSaving AirNow Map:  2022-06-06 (Time: 16)\nSaving AirNow Map:  2022-06-06 (Time: 17)\nSaving AirNow Map:  2022-06-06 (Time: 18)\nSaving AirNow Map:  2022-06-06 (Time: 19)\nSaving AirNow Map:  2022-06-06 (Time: 20)\nSaving AirNow Map:  2022-06-06 (Time: 21)\nSaving AirNow Map:  2022-06-06 (Time: 22)\nSaving AirNow Map:  2022-06-06 (Time: 23)\nSaving AirNow Map:  2022-06-06 (Time: 0)\nSaving AirNow Map:  2022-06-06 (Time: 1)\nSaving AirNow Map:  2022-06-06 (Time: 2)\nSaving AirNow Map:  2022-06-06 (Time: 3)\nSaving AirNow Map:  2022-06-06 (Time: 4)\nSaving AirNow Map:  2022-06-06 (Time: 5)\nSaving AirNow Map:  2022-06-06 (Time: 6)\nSaving AirNow Map:  2022-06-06 (Time: 7)\nSaving AirNow Map:  2022-06-06 (Time: 8)\nSaving AirNow Map:  2022-06-06 (Time: 9)\nSaving AirNow Map:  2022-06-06 (Time: 10)\nSaving AirNow Map:  2022-06-06 (Time: 11)\nSaving AirNow Map:  2022-06-05 (Time: 12)\nSaving AirNow Map:  2022-06-05 (Time: 13)\nSaving AirNow Map:  2022-06-05 (Time: 14)\nSaving AirNow Map:  2022-06-05 (Time: 15)\nSaving AirNow Map:  2022-06-05 (Time: 16)\nSaving AirNow Map:  2022-06-05 (Time: 17)\nSaving AirNow Map:  2022-06-05 (Time: 18)\nSaving AirNow Map:  2022-06-05 (Time: 19)\nSaving AirNow Map:  2022-06-05 (Time: 20)\nSaving AirNow Map:  2022-06-05 (Time: 21)\nSaving AirNow Map:  2022-06-05 (Time: 22)\nSaving AirNow Map:  2022-06-05 (Time: 23)\nSaving AirNow Map:  2022-06-05 (Time: 0)\nSaving AirNow Map:  2022-06-05 (Time: 1)\nSaving AirNow Map:  2022-06-05 (Time: 2)\nSaving AirNow Map:  2022-06-05 (Time: 3)\nSaving AirNow Map:  2022-06-05 (Time: 4)\nSaving AirNow Map:  2022-06-05 (Time: 5)\nSaving AirNow Map:  2022-06-05 (Time: 6)\nSaving AirNow Map:  2022-06-05 (Time: 7)\nSaving AirNow Map:  2022-06-05 (Time: 8)\nSaving AirNow Map:  2022-06-05 (Time: 9)\nSaving AirNow Map:  2022-06-05 (Time: 10)\nSaving AirNow Map:  2022-06-05 (Time: 11)\nSaving AirNow Map:  2022-06-04 (Time: 12)\nSaving AirNow Map:  2022-06-04 (Time: 13)\nSaving AirNow Map:  2022-06-04 (Time: 14)\nSaving AirNow Map:  2022-06-04 (Time: 15)\nSaving AirNow Map:  2022-06-04 (Time: 16)\nSaving AirNow Map:  2022-06-04 (Time: 17)\nSaving AirNow Map:  2022-06-04 (Time: 18)\nSaving AirNow Map:  2022-06-04 (Time: 19)\nSaving AirNow Map:  2022-06-04 (Time: 20)\nSaving AirNow Map:  2022-06-04 (Time: 21)\nSaving AirNow Map:  2022-06-04 (Time: 22)\nSaving AirNow Map:  2022-06-04 (Time: 23)\nSaving AirNow Map:  2022-06-04 (Time: 0)\nSaving AirNow Map:  2022-06-04 (Time: 1)\nSaving AirNow Map:  2022-06-04 (Time: 2)\nSaving AirNow Map:  2022-06-04 (Time: 3)\nSaving AirNow Map:  2022-06-04 (Time: 4)\nSaving AirNow Map:  2022-06-04 (Time: 5)\nSaving AirNow Map:  2022-06-04 (Time: 6)\nSaving AirNow Map:  2022-06-04 (Time: 7)\nSaving AirNow Map:  2022-06-04 (Time: 8)\nSaving AirNow Map:  2022-06-04 (Time: 9)\nSaving AirNow Map:  2022-06-04 (Time: 10)\nSaving AirNow Map:  2022-06-04 (Time: 11)\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060400.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060401.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060402.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060403.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060404.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060405.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060406.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060407.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060408.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060409.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060410.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060411.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060412.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060413.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060414.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060415.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060416.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060417.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060418.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060419.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060420.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060421.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060422.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060423.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060500.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060501.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060502.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060503.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060504.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060505.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060506.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060507.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060508.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060509.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060510.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060511.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060512.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060513.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060514.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060515.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060516.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060517.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060518.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060519.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060520.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060521.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060522.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060523.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060600.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060601.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060602.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060603.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060604.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060605.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060606.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060607.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060608.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060609.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060610.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060611.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060612.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060613.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060614.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060615.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060616.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060617.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060618.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060619.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060620.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060621.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060622.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060623.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060723.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060800.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060801.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060802.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060803.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060804.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060805.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060806.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060807.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060808.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060809.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060810.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060811.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060812.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060813.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060814.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060815.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060816.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060817.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060818.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060819.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060820.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060821.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060822.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060823.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060900.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060901.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060902.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060903.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060904.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060905.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060906.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060907.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060908.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060909.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060910.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060911.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060912.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060913.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060914.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060915.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060916.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060917.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060918.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060919.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060920.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060921.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060922.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060923.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061000.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061001.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061002.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061003.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061004.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061005.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061006.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061007.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061008.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061009.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061010.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061011.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061012.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061013.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061014.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061015.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061016.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061017.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061018.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061019.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061020.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061021.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061022.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061023.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060400.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060401.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060402.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060403.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060404.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060405.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060406.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060407.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060408.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060409.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060410.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060411.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060412.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060413.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060414.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060415.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060416.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060417.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060418.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060419.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060420.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060421.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060422.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060423.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060500.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060501.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060502.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060503.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060504.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060505.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060506.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060507.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060508.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060509.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060510.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060511.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060512.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060513.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060514.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060515.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060516.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060517.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060518.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060519.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060520.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060521.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060522.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060523.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060600.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060601.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060602.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060603.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060604.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060605.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060606.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060607.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060608.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060609.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060610.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060611.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060612.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060613.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060614.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060615.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060616.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060617.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060618.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060619.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060620.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060621.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060622.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060623.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060723.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060800.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060801.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060802.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060803.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060804.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060805.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060806.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060807.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060808.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060809.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060810.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060811.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060812.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060813.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060814.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060815.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060816.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060817.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060818.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060819.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060820.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060821.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060822.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060823.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060900.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060901.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060902.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060903.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060904.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060905.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060906.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060907.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060908.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060909.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060910.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060911.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060912.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060913.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060914.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060915.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060916.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060917.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060918.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060919.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060920.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060921.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060922.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060923.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061000.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061001.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061002.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061003.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061004.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061005.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061006.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061007.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061008.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061009.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061010.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061011.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061012.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061013.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061014.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061015.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061016.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061017.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061018.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061019.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061020.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061021.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061022.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061023.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nGenerating prediction.gif ...\nffmpeg version 4.2.2 Copyright (c) 2000-2019 the FFmpeg developers\n  built with gcc 9.3.0 (GCC)\n  configuration: --prefix=/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0/ffmpeg-4.2.2-ey --enable-pic --cc=/opt/sw/spack/0.16.0/lib/spack/env/gcc/gcc --cxx=/opt/sw/spack/0.16.0/lib/spack/env/gcc/g++ --enable-libxcb --enable-libxcb-shape --enable-libxcb-shm --enable-libxcb-xfixes --enable-xlib --disable-libfontconfig --disable-libfreetype --disable-libfribidi --enable-bzlib --enable-libmp3lame --enable-libopenjpeg --disable-libopus --enable-libspeex --enable-libvorbis --enable-avresample --enable-openssl --enable-shared --disable-libzmq --disable-libssh --disable-libwebp --disable-lzma --disable-libsnappy --enable-sdl2 --enable-libaom\n  libavutil      56. 31.100 / 56. 31.100\n  libavcodec     58. 54.100 / 58. 54.100\n  libavformat    58. 29.100 / 58. 29.100\n  libavdevice    58.  8.100 / 58.  8.100\n  libavfilter     7. 57.100 /  7. 57.100\n  libavresample   4.  0.  0 /  4.  0.  0\n  libswscale      5.  5.100 /  5.  5.100\n  libswresample   3.  5.100 /  3.  5.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/groups/ESS/aalnaim/cmaq/prediction.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:16.80, start: 0.000000, bitrate: 7654 kb/s\n    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 2000x1808, 7653 kb/s, 10 fps, 10 tbr, 10240 tbn, 20 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\nOutput #0, gif, to '/groups/ESS/aalnaim/cmaq/prediction.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n    Stream #0:0(und): Video: gif, pal8, 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn, 10 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\n      encoder         : Lavc58.54.100 gif\nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \n\u001B[1;32m[Parsed_palettegen_2 @ 0x1694bc0] \u001B[0m255(+1) colors generated out of 477188 colors; ratio=0.000534\n\u001B[1;32m[Parsed_palettegen_2 @ 0x1694bc0] \u001B[0m\u001B[0;33mDupped color: FF48A66C\n\u001B[0mframe=    1 fps=0.2 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00169x    \nframe=    6 fps=0.9 q=-0.0 size=    3072kB time=00:00:00.51 bitrate=49344.8kbits/s speed=0.078x    \nframe=   10 fps=1.4 q=-0.0 size=    5376kB time=00:00:00.91 bitrate=48395.8kbits/s speed=0.128x    \nframe=   14 fps=1.8 q=-0.0 size=    7424kB time=00:00:01.31 bitrate=46425.5kbits/s speed=0.17x    \nframe=   18 fps=2.2 q=-0.0 size=    9728kB time=00:00:01.71 bitrate=46603.4kbits/s speed=0.207x    \nframe=   22 fps=2.5 q=-0.0 size=   12288kB time=00:00:02.11 bitrate=47707.7kbits/s speed=0.237x    \nframe=   26 fps=2.7 q=-0.0 size=   15104kB time=00:00:02.51 bitrate=49295.6kbits/s speed=0.265x    \nframe=   30 fps=3.0 q=-0.0 size=   17408kB time=00:00:02.91 bitrate=49005.6kbits/s speed=0.29x    \nframe=   34 fps=3.2 q=-0.0 size=   19712kB time=00:00:03.31 bitrate=48785.7kbits/s speed=0.313x    \nframe=   38 fps=3.4 q=-0.0 size=   21760kB time=00:00:03.71 bitrate=48048.0kbits/s speed=0.334x    \nframe=   42 fps=3.6 q=-0.0 size=   24064kB time=00:00:04.11 bitrate=47964.1kbits/s speed=0.352x    \nframe=   46 fps=3.7 q=-0.0 size=   26624kB time=00:00:04.51 bitrate=48360.0kbits/s speed=0.367x    \nframe=   50 fps=3.9 q=-0.0 size=   29184kB time=00:00:04.91 bitrate=48691.5kbits/s speed=0.381x    \nframe=   54 fps=4.0 q=-0.0 size=   31744kB time=00:00:05.31 bitrate=48973.0kbits/s speed=0.396x    \nframe=   58 fps=4.2 q=-0.0 size=   34048kB time=00:00:05.71 bitrate=48847.8kbits/s speed=0.409x    \nframe=   62 fps=4.3 q=-0.0 size=   36096kB time=00:00:06.11 bitrate=48395.8kbits/s speed=0.42x    \nframe=   66 fps=4.4 q=-0.0 size=   38400kB time=00:00:06.51 bitrate=48321.5kbits/s speed=0.432x    \nframe=   70 fps=4.5 q=-0.0 size=   40960kB time=00:00:06.91 bitrate=48559.2kbits/s speed=0.44x    \nframe=   74 fps=4.5 q=-0.0 size=   43520kB time=00:00:07.31 bitrate=48771.0kbits/s speed=0.448x    \nframe=   78 fps=4.6 q=-0.0 size=   46080kB time=00:00:07.71 bitrate=48960.7kbits/s speed=0.457x    \nframe=   82 fps=4.7 q=-0.0 size=   48384kB time=00:00:08.11 bitrate=48873.2kbits/s speed=0.465x    \nframe=   86 fps=4.8 q=-0.0 size=   50432kB time=00:00:08.51 bitrate=48547.5kbits/s speed=0.473x    \nframe=   90 fps=4.9 q=-0.0 size=   52736kB time=00:00:08.91 bitrate=48486.3kbits/s speed=0.48x    \nframe=   94 fps=4.9 q=-0.0 size=   55296kB time=00:00:09.31 bitrate=48655.7kbits/s speed=0.486x    \nframe=   98 fps=5.0 q=-0.0 size=   58112kB time=00:00:09.71 bitrate=49027.1kbits/s speed=0.491x    \nframe=  102 fps=5.0 q=-0.0 size=   60416kB time=00:00:10.11 bitrate=48954.3kbits/s speed=0.498x    \nframe=  106 fps=5.1 q=-0.0 size=   62720kB time=00:00:10.51 bitrate=48887.0kbits/s speed=0.504x    \nframe=  110 fps=5.1 q=-0.0 size=   64768kB time=00:00:10.91 bitrate=48632.4kbits/s speed=0.509x    \nframe=  114 fps=5.2 q=-0.0 size=   67072kB time=00:00:11.31 bitrate=48581.2kbits/s speed=0.515x    \nframe=  118 fps=5.2 q=-0.0 size=   69632kB time=00:00:11.71 bitrate=48712.7kbits/s speed=0.519x    \nframe=  122 fps=5.3 q=-0.0 size=   72448kB time=00:00:12.11 bitrate=49008.6kbits/s speed=0.523x    \nframe=  126 fps=5.3 q=-0.0 size=   74752kB time=00:00:12.51 bitrate=48950.3kbits/s speed=0.528x    \nframe=  130 fps=5.4 q=-0.0 size=   77056kB time=00:00:12.91 bitrate=48895.6kbits/s speed=0.533x    \nframe=  134 fps=5.4 q=-0.0 size=   79104kB time=00:00:13.31 bitrate=48686.7kbits/s speed=0.537x    \nframe=  138 fps=5.4 q=-0.0 size=   81408kB time=00:00:13.71 bitrate=48642.9kbits/s speed=0.541x    \nframe=  142 fps=5.5 q=-0.0 size=   83968kB time=00:00:14.11 bitrate=48750.2kbits/s speed=0.544x    \nframe=  146 fps=5.5 q=-0.0 size=   86784kB time=00:00:14.51 bitrate=48996.2kbits/s speed=0.547x    \nframe=  150 fps=5.5 q=-0.0 size=   89088kB time=00:00:14.91 bitrate=48947.6kbits/s speed=0.55x    \nframe=  154 fps=5.6 q=-0.0 size=   91392kB time=00:00:15.31 bitrate=48901.6kbits/s speed=0.553x    \nframe=  158 fps=5.6 q=-0.0 size=   93440kB time=00:00:15.71 bitrate=48724.4kbits/s speed=0.556x    \nframe=  162 fps=5.6 q=-0.0 size=   95744kB time=00:00:16.11 bitrate=48686.2kbits/s speed=0.56x    \nframe=  166 fps=5.6 q=-0.0 size=   98560kB time=00:00:16.51 bitrate=48903.9kbits/s speed=0.562x    \nframe=  167 fps=5.6 q=-0.0 Lsize=   99903kB time=00:00:16.61 bitrate=49271.8kbits/s speed=0.559x    \nvideo:99903kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000020%\nDone prediction.gif !!!\nGenerating predctionAirNow.gif ...\nffmpeg version 4.2.2 Copyright (c) 2000-2019 the FFmpeg developers\n  built with gcc 9.3.0 (GCC)\n  configuration: --prefix=/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0/ffmpeg-4.2.2-ey --enable-pic --cc=/opt/sw/spack/0.16.0/lib/spack/env/gcc/gcc --cxx=/opt/sw/spack/0.16.0/lib/spack/env/gcc/g++ --enable-libxcb --enable-libxcb-shape --enable-libxcb-shm --enable-libxcb-xfixes --enable-xlib --disable-libfontconfig --disable-libfreetype --disable-libfribidi --enable-bzlib --enable-libmp3lame --enable-libopenjpeg --disable-libopus --enable-libspeex --enable-libvorbis --enable-avresample --enable-openssl --enable-shared --disable-libzmq --disable-libssh --disable-libwebp --disable-lzma --disable-libsnappy --enable-sdl2 --enable-libaom\n  libavutil      56. 31.100 / 56. 31.100\n  libavcodec     58. 54.100 / 58. 54.100\n  libavformat    58. 29.100 / 58. 29.100\n  libavdevice    58.  8.100 / 58.  8.100\n  libavfilter     7. 57.100 /  7. 57.100\n  libavresample   4.  0.  0 /  4.  0.  0\n  libswscale      5.  5.100 /  5.  5.100\n  libswresample   3.  5.100 /  3.  5.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:16.80, start: 0.000000, bitrate: 8060 kb/s\n    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 2000x1808, 8059 kb/s, 10 fps, 10 tbr, 10240 tbn, 20 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\nOutput #0, gif, to '/groups/ESS/aalnaim/cmaq/predctionAirNow.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n    Stream #0:0(und): Video: gif, pal8, 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn, 10 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\n      encoder         : Lavc58.54.100 gif\nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \n\u001B[1;32m[Parsed_palettegen_2 @ 0x235ef00] \u001B[0m255(+1) colors generated out of 1018539 colors; ratio=0.000250\nframe=    1 fps=0.1 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00131x    \nframe=    5 fps=0.6 q=-0.0 size=    2560kB time=00:00:00.41 bitrate=51150.0kbits/s speed=0.0501x    \nframe=    8 fps=0.9 q=-0.0 size=    4352kB time=00:00:00.71 bitrate=50213.5kbits/s speed=0.0816x    \nframe=   11 fps=1.2 q=-0.0 size=    6144kB time=00:00:01.01 bitrate=49833.3kbits/s speed=0.11x    \nframe=   14 fps=1.4 q=-0.0 size=    7936kB time=00:00:01.31 bitrate=49627.3kbits/s speed=0.135x    \nframe=   17 fps=1.7 q=-0.0 size=    9728kB time=00:00:01.61 bitrate=49498.0kbits/s speed=0.158x    \nframe=   20 fps=1.9 q=-0.0 size=   11520kB time=00:00:01.91 bitrate=49409.3kbits/s speed=0.177x    \nframe=   23 fps=2.0 q=-0.0 size=   13568kB time=00:00:02.21 bitrate=50293.7kbits/s speed=0.195x    \nframe=   26 fps=2.2 q=-0.0 size=   15616kB time=00:00:02.51 bitrate=50966.6kbits/s speed=0.212x    \nframe=   30 fps=2.4 q=-0.0 size=   18176kB time=00:00:02.91 bitrate=51167.6kbits/s speed=0.233x    \nframe=   33 fps=2.5 q=-0.0 size=   19968kB time=00:00:03.21 bitrate=50958.8kbits/s speed=0.247x    \nframe=   36 fps=2.7 q=-0.0 size=   21760kB time=00:00:03.51 bitrate=50785.7kbits/s speed=0.259x    \nframe=   39 fps=2.8 q=-0.0 size=   23552kB time=00:00:03.81 bitrate=50639.9kbits/s speed=0.271x    \nframe=   42 fps=2.9 q=-0.0 size=   25344kB time=00:00:04.11 bitrate=50515.3kbits/s speed=0.282x    \nframe=   45 fps=3.0 q=-0.0 size=   27392kB time=00:00:04.41 bitrate=50883.3kbits/s speed=0.292x    \nframe=   48 fps=3.1 q=-0.0 size=   29184kB time=00:00:04.71 bitrate=50759.1kbits/s speed= 0.3x    \nframe=   51 fps=3.1 q=-0.0 size=   31232kB time=00:00:05.01 bitrate=51068.4kbits/s speed=0.309x    \nframe=   55 fps=3.3 q=-0.0 size=   33792kB time=00:00:05.41 bitrate=51169.0kbits/s speed=0.321x    \nframe=   58 fps=3.3 q=-0.0 size=   35584kB time=00:00:05.71 bitrate=51051.5kbits/s speed=0.328x    \nframe=   61 fps=3.4 q=-0.0 size=   37376kB time=00:00:06.01 bitrate=50945.8kbits/s speed=0.336x    \nframe=   65 fps=3.5 q=-0.0 size=   39680kB time=00:00:06.41 bitrate=50711.2kbits/s speed=0.346x    \nframe=   68 fps=3.6 q=-0.0 size=   41472kB time=00:00:06.71 bitrate=50631.7kbits/s speed=0.352x    \nframe=   71 fps=3.6 q=-0.0 size=   43520kB time=00:00:07.01 bitrate=50858.2kbits/s speed=0.358x    \nframe=   74 fps=3.7 q=-0.0 size=   45568kB time=00:00:07.31 bitrate=51066.1kbits/s speed=0.363x    \nframe=   78 fps=3.8 q=-0.0 size=   48128kB time=00:00:07.71 bitrate=51136.8kbits/s speed=0.371x    \nframe=   82 fps=3.8 q=-0.0 size=   50688kB time=00:00:08.11 bitrate=51200.5kbits/s speed=0.379x    \nframe=   85 fps=3.9 q=-0.0 size=   52224kB time=00:00:08.41 bitrate=50870.3kbits/s speed=0.384x    \nframe=   89 fps=3.9 q=-0.0 size=   54528kB time=00:00:08.81 bitrate=50703.0kbits/s speed=0.391x    \nframe=   93 fps=4.0 q=-0.0 size=   57344kB time=00:00:09.21 bitrate=51005.7kbits/s speed=0.397x    \nframe=   96 fps=4.0 q=-0.0 size=   59136kB time=00:00:09.51 bitrate=50940.3kbits/s speed=0.401x    \nframe=   99 fps=4.1 q=-0.0 size=   61184kB time=00:00:09.81 bitrate=51092.7kbits/s speed=0.405x    \nframe=  103 fps=4.1 q=-0.0 size=   63744kB time=00:00:10.21 bitrate=51145.0kbits/s speed=0.41x    \nframe=  107 fps=4.2 q=-0.0 size=   66304kB time=00:00:10.61 bitrate=51193.4kbits/s speed=0.415x    \nframe=  111 fps=4.2 q=-0.0 size=   68352kB time=00:00:11.01 bitrate=50857.4kbits/s speed=0.42x    \nframe=  115 fps=4.3 q=-0.0 size=   70912kB time=00:00:11.41 bitrate=50912.5kbits/s speed=0.425x    \nframe=  118 fps=4.3 q=-0.0 size=   72960kB time=00:00:11.71 bitrate=51040.8kbits/s speed=0.428x    \nframe=  121 fps=4.3 q=-0.0 size=   74752kB time=00:00:12.01 bitrate=50988.2kbits/s speed=0.431x    \nframe=  125 fps=4.4 q=-0.0 size=   77568kB time=00:00:12.41 bitrate=51203.6kbits/s speed=0.435x    \nframe=  129 fps=4.4 q=-0.0 size=   79872kB time=00:00:12.81 bitrate=51078.2kbits/s speed=0.439x    \nframe=  133 fps=4.5 q=-0.0 size=   82176kB time=00:00:13.21 bitrate=50960.3kbits/s speed=0.443x    \nframe=  137 fps=4.5 q=-0.0 size=   84480kB time=00:00:13.61 bitrate=50849.4kbits/s speed=0.447x    \nframe=  141 fps=4.5 q=-0.0 size=   87296kB time=00:00:14.01 bitrate=51044.2kbits/s speed=0.45x    \nframe=  144 fps=4.6 q=-0.0 size=   89088kB time=00:00:14.31 bitrate=50999.9kbits/s speed=0.452x    \nframe=  148 fps=4.6 q=-0.0 size=   91904kB time=00:00:14.71 bitrate=51181.3kbits/s speed=0.456x    \nframe=  152 fps=4.6 q=-0.0 size=   94464kB time=00:00:15.11 bitrate=51214.4kbits/s speed=0.459x    \nframe=  156 fps=4.6 q=-0.0 size=   96768kB time=00:00:15.51 bitrate=51110.5kbits/s speed=0.462x    \nframe=  160 fps=4.7 q=-0.0 size=   99072kB time=00:00:15.91 bitrate=51011.8kbits/s speed=0.465x    \nframe=  164 fps=4.7 q=-0.0 size=  101632kB time=00:00:16.31 bitrate=51046.6kbits/s speed=0.467x    \nframe=  167 fps=4.7 q=-0.0 size=  103424kB time=00:00:16.61 bitrate=51008.4kbits/s speed=0.469x    \nframe=  167 fps=4.7 q=-0.0 Lsize=  104349kB time=00:00:16.61 bitrate=51464.4kbits/s speed=0.466x    \nvideo:104348kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000019%\nDone predctionAirNow.gif !!!\n",
  "history_begin_time" : 1655161520207,
  "history_end_time" : 1655217148977,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "f19XFqsqYdI4",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv(home + \"/cmaq/testing.csv\")\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='CMAQ12KM_O3(ppb)', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"Actual CMAQ: %Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving Prediction Map: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='CMAQ12KM_O3(ppb)', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t_Airnow), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"Actual AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving AirNow/Map: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_\" + str(t_Airnow) + \".tif\")\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/ActualCMAQ.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/ActualAirNow.mp4\", images, fps=10)\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/ActualCMAQ.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/ActualCMAQ.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/ActualCMAQ.mp4')\nprint(\"Done prediction.gif !!!\")\n\nprint(\"Generating predctionAirNow.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/ActualAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/ActualAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/ActualAirNow.mp4')\nprint(\"Done predctionAirNow.gif !!!\")\n\n",
  "history_output" : "Saving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 12)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 13)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 14)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 15)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 16)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 17)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 18)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 19)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 20)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 21)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 22)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 23)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 0)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 1)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 2)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 3)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 4)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 5)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 6)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 7)\n/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 8)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 9)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 10)\nSaving Prediction Map:  Actual CMAQ: 2022-06-10 (Time: 11)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 12)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 13)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 14)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 15)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 16)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 17)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 18)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 19)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 20)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 21)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 22)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 23)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 0)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 1)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 2)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 3)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 4)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 5)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 6)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 7)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 8)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 9)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 10)\nSaving Prediction Map:  Actual CMAQ: 2022-06-09 (Time: 11)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 12)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 13)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 14)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 15)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 16)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 17)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 18)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 19)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 20)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 21)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 22)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 23)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 0)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 1)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 2)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 3)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 4)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 5)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 6)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 7)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 8)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 9)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 10)\nSaving Prediction Map:  Actual CMAQ: 2022-06-08 (Time: 11)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 12)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 13)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 14)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 15)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 16)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 17)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 18)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 19)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 20)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 21)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 22)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 23)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 0)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 1)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 2)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 3)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 4)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 5)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 6)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 7)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 8)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 9)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 10)\nSaving Prediction Map:  Actual CMAQ: 2022-06-07 (Time: 11)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 12)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 13)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 14)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 15)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 16)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 17)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 18)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 19)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 20)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 21)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 22)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 23)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 0)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 1)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 2)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 3)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 4)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 5)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 6)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 7)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 8)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 9)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 10)\nSaving Prediction Map:  Actual CMAQ: 2022-06-06 (Time: 11)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 12)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 13)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 14)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 15)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 16)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 17)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 18)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 19)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 20)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 21)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 22)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 23)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 0)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 1)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 2)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 3)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 4)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 5)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 6)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 7)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 8)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 9)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 10)\nSaving Prediction Map:  Actual CMAQ: 2022-06-05 (Time: 11)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 12)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 13)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 14)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 15)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 16)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 17)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 18)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 19)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 20)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 21)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 22)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 23)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 0)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 1)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 2)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 3)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 4)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 5)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 6)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 7)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 8)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 9)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 10)\nSaving Prediction Map:  Actual CMAQ: 2022-06-04 (Time: 11)\nSaving AirNow/Map:  2022-06-10 (Time: 12)\nSaving AirNow/Map:  2022-06-10 (Time: 13)\nSaving AirNow/Map:  2022-06-10 (Time: 14)\nSaving AirNow/Map:  2022-06-10 (Time: 15)\nSaving AirNow/Map:  2022-06-10 (Time: 16)\nSaving AirNow/Map:  2022-06-10 (Time: 17)\nSaving AirNow/Map:  2022-06-10 (Time: 18)\nSaving AirNow/Map:  2022-06-10 (Time: 19)\nSaving AirNow/Map:  2022-06-10 (Time: 20)\nSaving AirNow/Map:  2022-06-10 (Time: 21)\nSaving AirNow/Map:  2022-06-10 (Time: 22)\nSaving AirNow/Map:  2022-06-10 (Time: 23)\nSaving AirNow/Map:  2022-06-10 (Time: 0)\nSaving AirNow/Map:  2022-06-10 (Time: 1)\nSaving AirNow/Map:  2022-06-10 (Time: 2)\nSaving AirNow/Map:  2022-06-10 (Time: 3)\nSaving AirNow/Map:  2022-06-10 (Time: 4)\nSaving AirNow/Map:  2022-06-10 (Time: 5)\nSaving AirNow/Map:  2022-06-10 (Time: 6)\nSaving AirNow/Map:  2022-06-10 (Time: 7)\nSaving AirNow/Map:  2022-06-10 (Time: 8)\nSaving AirNow/Map:  2022-06-10 (Time: 9)\nSaving AirNow/Map:  2022-06-10 (Time: 10)\nSaving AirNow/Map:  2022-06-10 (Time: 11)\nSaving AirNow/Map:  2022-06-09 (Time: 12)\nSaving AirNow/Map:  2022-06-09 (Time: 13)\nSaving AirNow/Map:  2022-06-09 (Time: 14)\nSaving AirNow/Map:  2022-06-09 (Time: 15)\nSaving AirNow/Map:  2022-06-09 (Time: 16)\nSaving AirNow/Map:  2022-06-09 (Time: 17)\nSaving AirNow/Map:  2022-06-09 (Time: 18)\nSaving AirNow/Map:  2022-06-09 (Time: 19)\nSaving AirNow/Map:  2022-06-09 (Time: 20)\nSaving AirNow/Map:  2022-06-09 (Time: 21)\nSaving AirNow/Map:  2022-06-09 (Time: 22)\nSaving AirNow/Map:  2022-06-09 (Time: 23)\nSaving AirNow/Map:  2022-06-09 (Time: 0)\nSaving AirNow/Map:  2022-06-09 (Time: 1)\nSaving AirNow/Map:  2022-06-09 (Time: 2)\nSaving AirNow/Map:  2022-06-09 (Time: 3)\nSaving AirNow/Map:  2022-06-09 (Time: 4)\nSaving AirNow/Map:  2022-06-09 (Time: 5)\nSaving AirNow/Map:  2022-06-09 (Time: 6)\nSaving AirNow/Map:  2022-06-09 (Time: 7)\nSaving AirNow/Map:  2022-06-09 (Time: 8)\nSaving AirNow/Map:  2022-06-09 (Time: 9)\nSaving AirNow/Map:  2022-06-09 (Time: 10)\nSaving AirNow/Map:  2022-06-09 (Time: 11)\nSaving AirNow/Map:  2022-06-08 (Time: 12)\nSaving AirNow/Map:  2022-06-08 (Time: 13)\nSaving AirNow/Map:  2022-06-08 (Time: 14)\nSaving AirNow/Map:  2022-06-08 (Time: 15)\nSaving AirNow/Map:  2022-06-08 (Time: 16)\nSaving AirNow/Map:  2022-06-08 (Time: 17)\nSaving AirNow/Map:  2022-06-08 (Time: 18)\nSaving AirNow/Map:  2022-06-08 (Time: 19)\nSaving AirNow/Map:  2022-06-08 (Time: 20)\nSaving AirNow/Map:  2022-06-08 (Time: 21)\nSaving AirNow/Map:  2022-06-08 (Time: 22)\nSaving AirNow/Map:  2022-06-08 (Time: 23)\nSaving AirNow/Map:  2022-06-08 (Time: 0)\nSaving AirNow/Map:  2022-06-08 (Time: 1)\nSaving AirNow/Map:  2022-06-08 (Time: 2)\nSaving AirNow/Map:  2022-06-08 (Time: 3)\nSaving AirNow/Map:  2022-06-08 (Time: 4)\nSaving AirNow/Map:  2022-06-08 (Time: 5)\nSaving AirNow/Map:  2022-06-08 (Time: 6)\nSaving AirNow/Map:  2022-06-08 (Time: 7)\nSaving AirNow/Map:  2022-06-08 (Time: 8)\nSaving AirNow/Map:  2022-06-08 (Time: 9)\nSaving AirNow/Map:  2022-06-08 (Time: 10)\nSaving AirNow/Map:  2022-06-08 (Time: 11)\nSaving AirNow/Map:  2022-06-07 (Time: 12)\nSaving AirNow/Map:  2022-06-07 (Time: 13)\nSaving AirNow/Map:  2022-06-07 (Time: 14)\nSaving AirNow/Map:  2022-06-07 (Time: 15)\nSaving AirNow/Map:  2022-06-07 (Time: 16)\nSaving AirNow/Map:  2022-06-07 (Time: 17)\nSaving AirNow/Map:  2022-06-07 (Time: 18)\nSaving AirNow/Map:  2022-06-07 (Time: 19)\nSaving AirNow/Map:  2022-06-07 (Time: 20)\nSaving AirNow/Map:  2022-06-07 (Time: 21)\nSaving AirNow/Map:  2022-06-07 (Time: 22)\nSaving AirNow/Map:  2022-06-07 (Time: 23)\nSaving AirNow/Map:  2022-06-07 (Time: 0)\nSaving AirNow/Map:  2022-06-07 (Time: 1)\nSaving AirNow/Map:  2022-06-07 (Time: 2)\nSaving AirNow/Map:  2022-06-07 (Time: 3)\nSaving AirNow/Map:  2022-06-07 (Time: 4)\nSaving AirNow/Map:  2022-06-07 (Time: 5)\nSaving AirNow/Map:  2022-06-07 (Time: 6)\nSaving AirNow/Map:  2022-06-07 (Time: 7)\nSaving AirNow/Map:  2022-06-07 (Time: 8)\nSaving AirNow/Map:  2022-06-07 (Time: 9)\nSaving AirNow/Map:  2022-06-07 (Time: 10)\nSaving AirNow/Map:  2022-06-07 (Time: 11)\nSaving AirNow/Map:  2022-06-06 (Time: 12)\nSaving AirNow/Map:  2022-06-06 (Time: 13)\nSaving AirNow/Map:  2022-06-06 (Time: 14)\nSaving AirNow/Map:  2022-06-06 (Time: 15)\nSaving AirNow/Map:  2022-06-06 (Time: 16)\nSaving AirNow/Map:  2022-06-06 (Time: 17)\nSaving AirNow/Map:  2022-06-06 (Time: 18)\nSaving AirNow/Map:  2022-06-06 (Time: 19)\nSaving AirNow/Map:  2022-06-06 (Time: 20)\nSaving AirNow/Map:  2022-06-06 (Time: 21)\nSaving AirNow/Map:  2022-06-06 (Time: 22)\nSaving AirNow/Map:  2022-06-06 (Time: 23)\nSaving AirNow/Map:  2022-06-06 (Time: 0)\nSaving AirNow/Map:  2022-06-06 (Time: 1)\nSaving AirNow/Map:  2022-06-06 (Time: 2)\nSaving AirNow/Map:  2022-06-06 (Time: 3)\nSaving AirNow/Map:  2022-06-06 (Time: 4)\nSaving AirNow/Map:  2022-06-06 (Time: 5)\nSaving AirNow/Map:  2022-06-06 (Time: 6)\nSaving AirNow/Map:  2022-06-06 (Time: 7)\nSaving AirNow/Map:  2022-06-06 (Time: 8)\nSaving AirNow/Map:  2022-06-06 (Time: 9)\nSaving AirNow/Map:  2022-06-06 (Time: 10)\nSaving AirNow/Map:  2022-06-06 (Time: 11)\nSaving AirNow/Map:  2022-06-05 (Time: 12)\nSaving AirNow/Map:  2022-06-05 (Time: 13)\nSaving AirNow/Map:  2022-06-05 (Time: 14)\nSaving AirNow/Map:  2022-06-05 (Time: 15)\nSaving AirNow/Map:  2022-06-05 (Time: 16)\nSaving AirNow/Map:  2022-06-05 (Time: 17)\nSaving AirNow/Map:  2022-06-05 (Time: 18)\nSaving AirNow/Map:  2022-06-05 (Time: 19)\nSaving AirNow/Map:  2022-06-05 (Time: 20)\nSaving AirNow/Map:  2022-06-05 (Time: 21)\nSaving AirNow/Map:  2022-06-05 (Time: 22)\nSaving AirNow/Map:  2022-06-05 (Time: 23)\nSaving AirNow/Map:  2022-06-05 (Time: 0)\nSaving AirNow/Map:  2022-06-05 (Time: 1)\nSaving AirNow/Map:  2022-06-05 (Time: 2)\nSaving AirNow/Map:  2022-06-05 (Time: 3)\nSaving AirNow/Map:  2022-06-05 (Time: 4)\nSaving AirNow/Map:  2022-06-05 (Time: 5)\nSaving AirNow/Map:  2022-06-05 (Time: 6)\nSaving AirNow/Map:  2022-06-05 (Time: 7)\nSaving AirNow/Map:  2022-06-05 (Time: 8)\nSaving AirNow/Map:  2022-06-05 (Time: 9)\nSaving AirNow/Map:  2022-06-05 (Time: 10)\nSaving AirNow/Map:  2022-06-05 (Time: 11)\nSaving AirNow/Map:  2022-06-04 (Time: 12)\nSaving AirNow/Map:  2022-06-04 (Time: 13)\nSaving AirNow/Map:  2022-06-04 (Time: 14)\nSaving AirNow/Map:  2022-06-04 (Time: 15)\nSaving AirNow/Map:  2022-06-04 (Time: 16)\nSaving AirNow/Map:  2022-06-04 (Time: 17)\nSaving AirNow/Map:  2022-06-04 (Time: 18)\nSaving AirNow/Map:  2022-06-04 (Time: 19)\nSaving AirNow/Map:  2022-06-04 (Time: 20)\nSaving AirNow/Map:  2022-06-04 (Time: 21)\nSaving AirNow/Map:  2022-06-04 (Time: 22)\nSaving AirNow/Map:  2022-06-04 (Time: 23)\nSaving AirNow/Map:  2022-06-04 (Time: 0)\nSaving AirNow/Map:  2022-06-04 (Time: 1)\nSaving AirNow/Map:  2022-06-04 (Time: 2)\nSaving AirNow/Map:  2022-06-04 (Time: 3)\nSaving AirNow/Map:  2022-06-04 (Time: 4)\nSaving AirNow/Map:  2022-06-04 (Time: 5)\nSaving AirNow/Map:  2022-06-04 (Time: 6)\nSaving AirNow/Map:  2022-06-04 (Time: 7)\nSaving AirNow/Map:  2022-06-04 (Time: 8)\nSaving AirNow/Map:  2022-06-04 (Time: 9)\nSaving AirNow/Map:  2022-06-04 (Time: 10)\nSaving AirNow/Map:  2022-06-04 (Time: 11)\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060400.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060401.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060402.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060403.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060404.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060405.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060406.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060407.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060408.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060409.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060410.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060411.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060412.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060413.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060414.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060415.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060416.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060417.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060418.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060419.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060420.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060421.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060422.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060423.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060500.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060501.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060502.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060503.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060504.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060505.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060506.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060507.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060508.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060509.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060510.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060511.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060512.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060513.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060514.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060515.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060516.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060517.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060518.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060519.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060520.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060521.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060522.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060523.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060600.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060601.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060602.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060603.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060604.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060605.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060606.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060607.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060608.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060609.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060610.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060611.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060612.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060613.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060614.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060615.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060616.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060617.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060618.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060619.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060620.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060621.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060622.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060623.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060723.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060800.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060801.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060802.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060803.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060804.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060805.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060806.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060807.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060808.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060809.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060810.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060811.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060812.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060813.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060814.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060815.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060816.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060817.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060818.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060819.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060820.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060821.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060822.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060823.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060900.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060901.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060902.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060903.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060904.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060905.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060906.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060907.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060908.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060909.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060910.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060911.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060912.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060913.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060914.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060915.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060916.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060917.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060918.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060919.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060920.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060921.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060922.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022060923.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061000.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061001.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061002.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061003.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061004.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061005.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061006.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061007.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061008.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061009.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061010.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061011.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061012.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061013.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061014.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061015.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061016.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061017.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061018.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061019.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061020.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061021.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061022.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualCMAQ_2022061023.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060400.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060401.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060402.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060403.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060404.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060405.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060406.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060407.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060408.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060409.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060410.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060411.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060412.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060413.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060414.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060415.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060416.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060417.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060418.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060419.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060420.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060421.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060422.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060423.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060500.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060501.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060502.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060503.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060504.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060505.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060506.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060507.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060508.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060509.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060510.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060511.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060512.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060513.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060514.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060515.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060516.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060517.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060518.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060519.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060520.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060521.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060522.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060523.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060600.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060601.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060602.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060603.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060604.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060605.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060606.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060607.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060608.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060609.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060610.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060611.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060612.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060613.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060614.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060615.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060616.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060617.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060618.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060619.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060620.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060621.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060622.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060623.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060723.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060800.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060801.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060802.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060803.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060804.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060805.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060806.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060807.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060808.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060809.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060810.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060811.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060812.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060813.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060814.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060815.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060816.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060817.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060818.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060819.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060820.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060821.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060822.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060823.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060900.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060901.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060902.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060903.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060904.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060905.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060906.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060907.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060908.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060909.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060910.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060911.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060912.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060913.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060914.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060915.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060916.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060917.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060918.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060919.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060920.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060921.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060922.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022060923.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061000.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061001.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061002.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061003.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061004.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061005.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061006.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061007.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061008.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061009.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061010.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061011.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061012.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061013.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061014.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061015.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061016.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061017.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061018.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061019.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061020.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061021.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061022.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/ActualAirNow_2022061023.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nGenerating prediction.gif ...\nffmpeg version 4.2.2 Copyright (c) 2000-2019 the FFmpeg developers\n  built with gcc 9.3.0 (GCC)\n  configuration: --prefix=/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0/ffmpeg-4.2.2-ey --enable-pic --cc=/opt/sw/spack/0.16.0/lib/spack/env/gcc/gcc --cxx=/opt/sw/spack/0.16.0/lib/spack/env/gcc/g++ --enable-libxcb --enable-libxcb-shape --enable-libxcb-shm --enable-libxcb-xfixes --enable-xlib --disable-libfontconfig --disable-libfreetype --disable-libfribidi --enable-bzlib --enable-libmp3lame --enable-libopenjpeg --disable-libopus --enable-libspeex --enable-libvorbis --enable-avresample --enable-openssl --enable-shared --disable-libzmq --disable-libssh --disable-libwebp --disable-lzma --disable-libsnappy --enable-sdl2 --enable-libaom\n  libavutil      56. 31.100 / 56. 31.100\n  libavcodec     58. 54.100 / 58. 54.100\n  libavformat    58. 29.100 / 58. 29.100\n  libavdevice    58.  8.100 / 58.  8.100\n  libavfilter     7. 57.100 /  7. 57.100\n  libavresample   4.  0.  0 /  4.  0.  0\n  libswscale      5.  5.100 /  5.  5.100\n  libswresample   3.  5.100 /  3.  5.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/groups/ESS/aalnaim/cmaq/ActualCMAQ.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:16.80, start: 0.000000, bitrate: 4642 kb/s\n    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 2000x1808, 4641 kb/s, 10 fps, 10 tbr, 10240 tbn, 20 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\nOutput #0, gif, to '/groups/ESS/aalnaim/cmaq/ActualCMAQ.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n    Stream #0:0(und): Video: gif, pal8, 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn, 10 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\n      encoder         : Lavc58.54.100 gif\nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \n\u001B[1;32m[Parsed_palettegen_2 @ 0x1559700] \u001B[0m255(+1) colors generated out of 379367 colors; ratio=0.000672\nframe=    1 fps=0.2 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00198x    \nframe=    6 fps=1.1 q=-0.0 size=    2816kB time=00:00:00.51 bitrate=45232.7kbits/s speed=0.0902x    \nframe=   10 fps=1.6 q=-0.0 size=    4864kB time=00:00:00.91 bitrate=43786.7kbits/s speed=0.147x    \nframe=   14 fps=2.1 q=-0.0 size=    7168kB time=00:00:01.31 bitrate=44824.6kbits/s speed=0.194x    \nframe=   18 fps=2.5 q=-0.0 size=    9216kB time=00:00:01.71 bitrate=44150.6kbits/s speed=0.235x    \nframe=   22 fps=2.8 q=-0.0 size=   11776kB time=00:00:02.11 bitrate=45719.9kbits/s speed=0.269x    \nframe=   26 fps=3.1 q=-0.0 size=   14080kB time=00:00:02.51 bitrate=45953.5kbits/s speed=0.299x    \nframe=   30 fps=3.4 q=-0.0 size=   16384kB time=00:00:02.91 bitrate=46122.9kbits/s speed=0.325x    \nframe=   34 fps=3.6 q=-0.0 size=   18432kB time=00:00:03.31 bitrate=45617.8kbits/s speed=0.349x    \nframe=   38 fps=3.8 q=-0.0 size=   20480kB time=00:00:03.71 bitrate=45221.6kbits/s speed=0.37x    \nframe=   42 fps=4.0 q=-0.0 size=   22784kB time=00:00:04.11 bitrate=45412.8kbits/s speed=0.389x    \nframe=   46 fps=4.1 q=-0.0 size=   25088kB time=00:00:04.51 bitrate=45570.0kbits/s speed=0.406x    \nframe=   50 fps=4.3 q=-0.0 size=   27392kB time=00:00:04.91 bitrate=45701.7kbits/s speed=0.421x    \nframe=   54 fps=4.4 q=-0.0 size=   29696kB time=00:00:05.31 bitrate=45813.5kbits/s speed=0.436x    \nframe=   58 fps=4.6 q=-0.0 size=   31744kB time=00:00:05.71 bitrate=45542.4kbits/s speed=0.449x    \nframe=   62 fps=4.7 q=-0.0 size=   34048kB time=00:00:06.11 bitrate=45650.0kbits/s speed=0.461x    \nframe=   66 fps=4.8 q=-0.0 size=   36096kB time=00:00:06.51 bitrate=45422.2kbits/s speed=0.472x    \nframe=   70 fps=4.9 q=-0.0 size=   38400kB time=00:00:06.91 bitrate=45524.3kbits/s speed=0.482x    \nframe=   74 fps=5.0 q=-0.0 size=   40704kB time=00:00:07.31 bitrate=45615.2kbits/s speed=0.491x    \nframe=   78 fps=5.1 q=-0.0 size=   43008kB time=00:00:07.71 bitrate=45696.7kbits/s speed= 0.5x    \nframe=   82 fps=5.2 q=-0.0 size=   45312kB time=00:00:08.11 bitrate=45770.1kbits/s speed=0.509x    \nframe=   86 fps=5.2 q=-0.0 size=   47616kB time=00:00:08.51 bitrate=45836.7kbits/s speed=0.518x    \nframe=   90 fps=5.3 q=-0.0 size=   49920kB time=00:00:08.91 bitrate=45897.3kbits/s speed=0.526x    \nframe=   94 fps=5.4 q=-0.0 size=   52224kB time=00:00:09.31 bitrate=45952.6kbits/s speed=0.533x    \nframe=   98 fps=5.4 q=-0.0 size=   54528kB time=00:00:09.71 bitrate=46003.4kbits/s speed=0.539x    \nframe=  102 fps=5.5 q=-0.0 size=   56832kB time=00:00:10.11 bitrate=46050.2kbits/s speed=0.546x    \nframe=  106 fps=5.6 q=-0.0 size=   58880kB time=00:00:10.51 bitrate=45893.9kbits/s speed=0.552x    \nframe=  110 fps=5.6 q=-0.0 size=   61184kB time=00:00:10.91 bitrate=45941.3kbits/s speed=0.559x    \nframe=  115 fps=5.7 q=-0.0 size=   64000kB time=00:00:11.41 bitrate=45949.9kbits/s speed=0.566x    \nframe=  119 fps=5.8 q=-0.0 size=   66560kB time=00:00:11.81 bitrate=46169.3kbits/s speed=0.571x    \nframe=  123 fps=5.8 q=-0.0 size=   68864kB time=00:00:12.21 bitrate=46202.6kbits/s speed=0.576x    \nframe=  127 fps=5.8 q=-0.0 size=   70912kB time=00:00:12.61 bitrate=46067.5kbits/s speed=0.581x    \nframe=  131 fps=5.9 q=-0.0 size=   73216kB time=00:00:13.01 bitrate=46101.9kbits/s speed=0.585x    \nframe=  135 fps=5.9 q=-0.0 size=   75520kB time=00:00:13.41 bitrate=46134.2kbits/s speed=0.589x    \nframe=  139 fps=6.0 q=-0.0 size=   77824kB time=00:00:13.81 bitrate=46164.7kbits/s speed=0.594x    \nframe=  143 fps=6.0 q=-0.0 size=   80128kB time=00:00:14.21 bitrate=46193.4kbits/s speed=0.597x    \nframe=  147 fps=6.0 q=-0.0 size=   82432kB time=00:00:14.61 bitrate=46220.6kbits/s speed=0.601x    \nframe=  151 fps=6.1 q=-0.0 size=   84736kB time=00:00:15.01 bitrate=46246.3kbits/s speed=0.604x    \nframe=  155 fps=6.1 q=-0.0 size=   87040kB time=00:00:15.41 bitrate=46270.7kbits/s speed=0.608x    \nframe=  159 fps=6.1 q=-0.0 size=   89088kB time=00:00:15.81 bitrate=46161.2kbits/s speed=0.61x    \nframe=  163 fps=6.2 q=-0.0 size=   91392kB time=00:00:16.21 bitrate=46186.5kbits/s speed=0.614x    \nframe=  167 fps=6.2 q=-0.0 size=   93952kB time=00:00:16.61 bitrate=46336.8kbits/s speed=0.616x    \nframe=  167 fps=6.2 q=-0.0 Lsize=   94611kB time=00:00:16.61 bitrate=46662.0kbits/s speed=0.613x    \nvideo:94611kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000021%\nDone prediction.gif !!!\nGenerating predctionAirNow.gif ...\nffmpeg version 4.2.2 Copyright (c) 2000-2019 the FFmpeg developers\n  built with gcc 9.3.0 (GCC)\n  configuration: --prefix=/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0/ffmpeg-4.2.2-ey --enable-pic --cc=/opt/sw/spack/0.16.0/lib/spack/env/gcc/gcc --cxx=/opt/sw/spack/0.16.0/lib/spack/env/gcc/g++ --enable-libxcb --enable-libxcb-shape --enable-libxcb-shm --enable-libxcb-xfixes --enable-xlib --disable-libfontconfig --disable-libfreetype --disable-libfribidi --enable-bzlib --enable-libmp3lame --enable-libopenjpeg --disable-libopus --enable-libspeex --enable-libvorbis --enable-avresample --enable-openssl --enable-shared --disable-libzmq --disable-libssh --disable-libwebp --disable-lzma --disable-libsnappy --enable-sdl2 --enable-libaom\n  libavutil      56. 31.100 / 56. 31.100\n  libavcodec     58. 54.100 / 58. 54.100\n  libavformat    58. 29.100 / 58. 29.100\n  libavdevice    58.  8.100 / 58.  8.100\n  libavfilter     7. 57.100 /  7. 57.100\n  libavresample   4.  0.  0 /  4.  0.  0\n  libswscale      5.  5.100 /  5.  5.100\n  libswresample   3.  5.100 /  3.  5.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/groups/ESS/aalnaim/cmaq/ActualAirNow.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:16.80, start: 0.000000, bitrate: 5629 kb/s\n    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 2000x1808, 5627 kb/s, 10 fps, 10 tbr, 10240 tbn, 20 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\nOutput #0, gif, to '/groups/ESS/aalnaim/cmaq/ActualAirNow.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n    Stream #0:0(und): Video: gif, pal8, 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn, 10 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\n      encoder         : Lavc58.54.100 gif\nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \n\u001B[1;32m[Parsed_palettegen_2 @ 0xc53a00] \u001B[0m255(+1) colors generated out of 983683 colors; ratio=0.000259\n\u001B[1;32m[Parsed_palettegen_2 @ 0xc53a00] \u001B[0m\u001B[0;33mDupped color: FF46A277\n\u001B[0m\u001B[1;32m[Parsed_palettegen_2 @ 0xc53a00] \u001B[0m\u001B[0;33mDupped color: FF46A374\n\u001B[0mframe=    1 fps=0.1 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00142x    \nframe=    5 fps=0.7 q=-0.0 size=    2304kB time=00:00:00.41 bitrate=46035.0kbits/s speed=0.0544x    \nframe=    9 fps=1.1 q=-0.0 size=    4608kB time=00:00:00.81 bitrate=46603.4kbits/s speed=0.0991x    \nframe=   13 fps=1.5 q=-0.0 size=    6912kB time=00:00:01.21 bitrate=46796.0kbits/s speed=0.137x    \nframe=   17 fps=1.8 q=-0.0 size=    9472kB time=00:00:01.61 bitrate=48195.4kbits/s speed=0.17x    \nframe=   21 fps=2.1 q=-0.0 size=   11776kB time=00:00:02.01 bitrate=47994.5kbits/s speed=0.199x    \nframe=   25 fps=2.3 q=-0.0 size=   14336kB time=00:00:02.41 bitrate=48730.5kbits/s speed=0.224x    \nframe=   29 fps=2.6 q=-0.0 size=   16896kB time=00:00:02.81 bitrate=49257.0kbits/s speed=0.247x    \nframe=   33 fps=2.8 q=-0.0 size=   19200kB time=00:00:03.21 bitrate=48998.9kbits/s speed=0.268x    \nframe=   37 fps=2.9 q=-0.0 size=   21248kB time=00:00:03.61 bitrate=48217.1kbits/s speed=0.287x    \nframe=   41 fps=3.1 q=-0.0 size=   23808kB time=00:00:04.01 bitrate=48637.2kbits/s speed=0.304x    \nframe=   45 fps=3.3 q=-0.0 size=   26112kB time=00:00:04.41 bitrate=48505.6kbits/s speed=0.32x    \nframe=   49 fps=3.4 q=-0.0 size=   28672kB time=00:00:04.81 bitrate=48831.8kbits/s speed=0.333x    \nframe=   53 fps=3.5 q=-0.0 size=   30976kB time=00:00:05.21 bitrate=48705.4kbits/s speed=0.347x    \nframe=   57 fps=3.6 q=-0.0 size=   33280kB time=00:00:05.61 bitrate=48597.1kbits/s speed=0.359x    \nframe=   61 fps=3.8 q=-0.0 size=   35584kB time=00:00:06.01 bitrate=48503.2kbits/s speed=0.37x    \nframe=   65 fps=3.9 q=-0.0 size=   37888kB time=00:00:06.41 bitrate=48421.0kbits/s speed=0.38x    \nframe=   69 fps=3.9 q=-0.0 size=   40192kB time=00:00:06.81 bitrate=48348.4kbits/s speed=0.39x    \nframe=   73 fps=4.0 q=-0.0 size=   42752kB time=00:00:07.21 bitrate=48574.8kbits/s speed=0.398x    \nframe=   77 fps=4.1 q=-0.0 size=   45312kB time=00:00:07.61 bitrate=48777.4kbits/s speed=0.407x    \nframe=   81 fps=4.2 q=-0.0 size=   47616kB time=00:00:08.01 bitrate=48697.9kbits/s speed=0.415x    \nframe=   85 fps=4.3 q=-0.0 size=   49920kB time=00:00:08.41 bitrate=48626.0kbits/s speed=0.422x    \nframe=   89 fps=4.3 q=-0.0 size=   52480kB time=00:00:08.81 bitrate=48798.7kbits/s speed=0.429x    \nframe=   93 fps=4.4 q=-0.0 size=   54784kB time=00:00:09.21 bitrate=48728.6kbits/s speed=0.435x    \nframe=   97 fps=4.4 q=-0.0 size=   57088kB time=00:00:09.61 bitrate=48664.4kbits/s speed=0.44x    \nframe=  101 fps=4.5 q=-0.0 size=   59648kB time=00:00:10.01 bitrate=48814.8kbits/s speed=0.447x    \nframe=  105 fps=4.6 q=-0.0 size=   62208kB time=00:00:10.41 bitrate=48953.7kbits/s speed=0.452x    \nframe=  109 fps=4.6 q=-0.0 size=   64512kB time=00:00:10.81 bitrate=48888.3kbits/s speed=0.458x    \nframe=  113 fps=4.7 q=-0.0 size=   66816kB time=00:00:11.21 bitrate=48827.5kbits/s speed=0.463x    \nframe=  117 fps=4.7 q=-0.0 size=   69376kB time=00:00:11.61 bitrate=48951.6kbits/s speed=0.467x    \nframe=  121 fps=4.7 q=-0.0 size=   71680kB time=00:00:12.01 bitrate=48892.8kbits/s speed=0.471x    \nframe=  125 fps=4.8 q=-0.0 size=   74240kB time=00:00:12.41 bitrate=49006.8kbits/s speed=0.475x    \nframe=  129 fps=4.8 q=-0.0 size=   76544kB time=00:00:12.81 bitrate=48949.9kbits/s speed=0.479x    \nframe=  133 fps=4.9 q=-0.0 size=   78848kB time=00:00:13.21 bitrate=48896.5kbits/s speed=0.482x    \nframe=  137 fps=4.9 q=-0.0 size=   81408kB time=00:00:13.61 bitrate=49000.3kbits/s speed=0.486x    \nframe=  141 fps=4.9 q=-0.0 size=   83968kB time=00:00:14.01 bitrate=49098.2kbits/s speed=0.489x    \nframe=  145 fps=5.0 q=-0.0 size=   86272kB time=00:00:14.41 bitrate=49045.1kbits/s speed=0.492x    \nframe=  149 fps=5.0 q=-0.0 size=   88832kB time=00:00:14.81 bitrate=49136.5kbits/s speed=0.495x    \nframe=  153 fps=5.0 q=-0.0 size=   91136kB time=00:00:15.21 bitrate=49085.2kbits/s speed=0.498x    \nframe=  157 fps=5.0 q=-0.0 size=   93440kB time=00:00:15.61 bitrate=49036.5kbits/s speed=0.501x    \nframe=  161 fps=5.1 q=-0.0 size=   96000kB time=00:00:16.01 bitrate=49121.3kbits/s speed=0.504x    \nframe=  165 fps=5.1 q=-0.0 size=   98304kB time=00:00:16.41 bitrate=49074.1kbits/s speed=0.506x    \nframe=  167 fps=5.1 q=-0.0 Lsize=  100257kB time=00:00:16.61 bitrate=49446.7kbits/s speed=0.505x    \nvideo:100257kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000019%\nDone predctionAirNow.gif !!!\n",
  "history_begin_time" : 1655141747936,
  "history_end_time" : 1655160671413,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "5jFwZlD4ufey",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n",
  "history_output" : "Running",
  "history_begin_time" : 1655141374365,
  "history_end_time" : 1655160670882,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "QFGVRAKoxlCx",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving...: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t_Airnow), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving...: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_\" + str(t_Airnow) + \".tif\")\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\nprint(\"Generating predctionAirNow.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\nprint(\"Done predctionAirNow.gif !!!\")\n\n",
  "history_output" : "Saving...:  2022-06-10 (Time: 12)\nSaving...:  2022-06-10 (Time: 13)\nSaving...:  2022-06-10 (Time: 14)\nSaving...:  2022-06-10 (Time: 15)\nSaving...:  2022-06-10 (Time: 16)\nSaving...:  2022-06-10 (Time: 17)\nSaving...:  2022-06-10 (Time: 18)\nSaving...:  2022-06-10 (Time: 19)\nSaving...:  2022-06-10 (Time: 20)\nSaving...:  2022-06-10 (Time: 21)\nSaving...:  2022-06-10 (Time: 22)\nSaving...:  2022-06-10 (Time: 23)\nSaving...:  2022-06-10 (Time: 0)\nSaving...:  2022-06-10 (Time: 1)\nSaving...:  2022-06-10 (Time: 2)\nSaving...:  2022-06-10 (Time: 3)\nSaving...:  2022-06-10 (Time: 4)\nSaving...:  2022-06-10 (Time: 5)\nSaving...:  2022-06-10 (Time: 6)\nSaving...:  2022-06-10 (Time: 7)\n/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\nSaving...:  2022-06-10 (Time: 8)\nSaving...:  2022-06-10 (Time: 9)\nSaving...:  2022-06-10 (Time: 10)\nSaving...:  2022-06-10 (Time: 11)\nSaving...:  2022-06-09 (Time: 12)\nSaving...:  2022-06-09 (Time: 13)\nSaving...:  2022-06-09 (Time: 14)\nSaving...:  2022-06-09 (Time: 15)\nSaving...:  2022-06-09 (Time: 16)\nSaving...:  2022-06-09 (Time: 17)\nSaving...:  2022-06-09 (Time: 18)\nSaving...:  2022-06-09 (Time: 19)\nSaving...:  2022-06-09 (Time: 20)\nSaving...:  2022-06-09 (Time: 21)\nSaving...:  2022-06-09 (Time: 22)\nSaving...:  2022-06-09 (Time: 23)\nSaving...:  2022-06-09 (Time: 0)\nSaving...:  2022-06-09 (Time: 1)\nSaving...:  2022-06-09 (Time: 2)\nSaving...:  2022-06-09 (Time: 3)\nSaving...:  2022-06-09 (Time: 4)\nSaving...:  2022-06-09 (Time: 5)\nSaving...:  2022-06-09 (Time: 6)\nSaving...:  2022-06-09 (Time: 7)\nSaving...:  2022-06-09 (Time: 8)\nSaving...:  2022-06-09 (Time: 9)\nSaving...:  2022-06-09 (Time: 10)\nSaving...:  2022-06-09 (Time: 11)\nSaving...:  2022-06-08 (Time: 12)\nSaving...:  2022-06-08 (Time: 13)\nSaving...:  2022-06-08 (Time: 14)\nSaving...:  2022-06-08 (Time: 15)\nSaving...:  2022-06-08 (Time: 16)\nSaving...:  2022-06-08 (Time: 17)\nSaving...:  2022-06-08 (Time: 18)\nSaving...:  2022-06-08 (Time: 19)\nSaving...:  2022-06-08 (Time: 20)\nSaving...:  2022-06-08 (Time: 21)\nSaving...:  2022-06-08 (Time: 22)\nSaving...:  2022-06-08 (Time: 23)\nSaving...:  2022-06-08 (Time: 0)\nSaving...:  2022-06-08 (Time: 1)\nSaving...:  2022-06-08 (Time: 2)\nSaving...:  2022-06-08 (Time: 3)\nSaving...:  2022-06-08 (Time: 4)\nSaving...:  2022-06-08 (Time: 5)\nSaving...:  2022-06-08 (Time: 6)\nSaving...:  2022-06-08 (Time: 7)\nSaving...:  2022-06-08 (Time: 8)\nSaving...:  2022-06-08 (Time: 9)\nSaving...:  2022-06-08 (Time: 10)\nSaving...:  2022-06-08 (Time: 11)\nSaving...:  2022-06-07 (Time: 12)\nSaving...:  2022-06-07 (Time: 13)\nSaving...:  2022-06-07 (Time: 14)\nSaving...:  2022-06-07 (Time: 15)\nSaving...:  2022-06-07 (Time: 16)\nSaving...:  2022-06-07 (Time: 17)\nSaving...:  2022-06-07 (Time: 18)\nSaving...:  2022-06-07 (Time: 19)\nSaving...:  2022-06-07 (Time: 20)\nSaving...:  2022-06-07 (Time: 21)\nSaving...:  2022-06-07 (Time: 22)\nSaving...:  2022-06-07 (Time: 23)\nSaving...:  2022-06-07 (Time: 0)\nSaving...:  2022-06-07 (Time: 1)\nSaving...:  2022-06-07 (Time: 2)\nSaving...:  2022-06-07 (Time: 3)\nSaving...:  2022-06-07 (Time: 4)\nSaving...:  2022-06-07 (Time: 5)\nSaving...:  2022-06-07 (Time: 6)\nSaving...:  2022-06-07 (Time: 7)\nSaving...:  2022-06-07 (Time: 8)\nSaving...:  2022-06-07 (Time: 9)\nSaving...:  2022-06-07 (Time: 10)\nSaving...:  2022-06-07 (Time: 11)\nSaving...:  2022-06-06 (Time: 12)\nSaving...:  2022-06-06 (Time: 13)\nSaving...:  2022-06-06 (Time: 14)\nSaving...:  2022-06-06 (Time: 15)\nSaving...:  2022-06-06 (Time: 16)\nSaving...:  2022-06-06 (Time: 17)\nSaving...:  2022-06-06 (Time: 18)\nSaving...:  2022-06-06 (Time: 19)\nSaving...:  2022-06-06 (Time: 20)\nSaving...:  2022-06-06 (Time: 21)\nSaving...:  2022-06-06 (Time: 22)\nSaving...:  2022-06-06 (Time: 23)\nSaving...:  2022-06-06 (Time: 0)\nSaving...:  2022-06-06 (Time: 1)\nSaving...:  2022-06-06 (Time: 2)\nSaving...:  2022-06-06 (Time: 3)\nSaving...:  2022-06-06 (Time: 4)\nSaving...:  2022-06-06 (Time: 5)\nSaving...:  2022-06-06 (Time: 6)\nSaving...:  2022-06-06 (Time: 7)\nSaving...:  2022-06-06 (Time: 8)\nSaving...:  2022-06-06 (Time: 9)\nSaving...:  2022-06-06 (Time: 10)\nSaving...:  2022-06-06 (Time: 11)\nSaving...:  2022-06-05 (Time: 12)\nSaving...:  2022-06-05 (Time: 13)\nSaving...:  2022-06-05 (Time: 14)\nSaving...:  2022-06-05 (Time: 15)\nSaving...:  2022-06-05 (Time: 16)\nSaving...:  2022-06-05 (Time: 17)\nSaving...:  2022-06-05 (Time: 18)\nSaving...:  2022-06-05 (Time: 19)\nSaving...:  2022-06-05 (Time: 20)\nSaving...:  2022-06-05 (Time: 21)\nSaving...:  2022-06-05 (Time: 22)\nSaving...:  2022-06-05 (Time: 23)\nSaving...:  2022-06-05 (Time: 0)\nSaving...:  2022-06-05 (Time: 1)\nSaving...:  2022-06-05 (Time: 2)\nSaving...:  2022-06-05 (Time: 3)\nSaving...:  2022-06-05 (Time: 4)\nSaving...:  2022-06-05 (Time: 5)\nSaving...:  2022-06-05 (Time: 6)\nSaving...:  2022-06-05 (Time: 7)\nSaving...:  2022-06-05 (Time: 8)\nSaving...:  2022-06-05 (Time: 9)\nSaving...:  2022-06-05 (Time: 10)\nSaving...:  2022-06-05 (Time: 11)\nSaving...:  2022-06-04 (Time: 12)\nSaving...:  2022-06-04 (Time: 13)\nSaving...:  2022-06-04 (Time: 14)\nSaving...:  2022-06-04 (Time: 15)\nSaving...:  2022-06-04 (Time: 16)\nSaving...:  2022-06-04 (Time: 17)\nSaving...:  2022-06-04 (Time: 18)\nSaving...:  2022-06-04 (Time: 19)\nSaving...:  2022-06-04 (Time: 20)\nSaving...:  2022-06-04 (Time: 21)\nSaving...:  2022-06-04 (Time: 22)\nSaving...:  2022-06-04 (Time: 23)\nSaving...:  2022-06-04 (Time: 0)\nSaving...:  2022-06-04 (Time: 1)\nSaving...:  2022-06-04 (Time: 2)\nSaving...:  2022-06-04 (Time: 3)\nSaving...:  2022-06-04 (Time: 4)\nSaving...:  2022-06-04 (Time: 5)\nSaving...:  2022-06-04 (Time: 6)\nSaving...:  2022-06-04 (Time: 7)\nSaving...:  2022-06-04 (Time: 8)\nSaving...:  2022-06-04 (Time: 9)\nSaving...:  2022-06-04 (Time: 10)\nSaving...:  2022-06-04 (Time: 11)\nSaving...:  2022-06-10 (Time: 12)\nSaving...:  2022-06-10 (Time: 13)\nSaving...:  2022-06-10 (Time: 14)\nSaving...:  2022-06-10 (Time: 15)\nSaving...:  2022-06-10 (Time: 16)\nSaving...:  2022-06-10 (Time: 17)\nSaving...:  2022-06-10 (Time: 18)\nSaving...:  2022-06-10 (Time: 19)\nSaving...:  2022-06-10 (Time: 20)\nSaving...:  2022-06-10 (Time: 21)\nSaving...:  2022-06-10 (Time: 22)\nSaving...:  2022-06-10 (Time: 23)\nSaving...:  2022-06-10 (Time: 0)\nSaving...:  2022-06-10 (Time: 1)\nSaving...:  2022-06-10 (Time: 2)\nSaving...:  2022-06-10 (Time: 3)\nSaving...:  2022-06-10 (Time: 4)\nSaving...:  2022-06-10 (Time: 5)\nSaving...:  2022-06-10 (Time: 6)\nSaving...:  2022-06-10 (Time: 7)\nSaving...:  2022-06-10 (Time: 8)\nSaving...:  2022-06-10 (Time: 9)\nSaving...:  2022-06-10 (Time: 10)\nSaving...:  2022-06-10 (Time: 11)\nSaving...:  2022-06-09 (Time: 12)\nSaving...:  2022-06-09 (Time: 13)\nSaving...:  2022-06-09 (Time: 14)\nSaving...:  2022-06-09 (Time: 15)\nSaving...:  2022-06-09 (Time: 16)\nSaving...:  2022-06-09 (Time: 17)\nSaving...:  2022-06-09 (Time: 18)\nSaving...:  2022-06-09 (Time: 19)\nSaving...:  2022-06-09 (Time: 20)\nSaving...:  2022-06-09 (Time: 21)\nSaving...:  2022-06-09 (Time: 22)\nSaving...:  2022-06-09 (Time: 23)\nSaving...:  2022-06-09 (Time: 0)\nSaving...:  2022-06-09 (Time: 1)\nSaving...:  2022-06-09 (Time: 2)\nSaving...:  2022-06-09 (Time: 3)\nSaving...:  2022-06-09 (Time: 4)\nSaving...:  2022-06-09 (Time: 5)\nSaving...:  2022-06-09 (Time: 6)\nSaving...:  2022-06-09 (Time: 7)\nSaving...:  2022-06-09 (Time: 8)\nSaving...:  2022-06-09 (Time: 9)\nSaving...:  2022-06-09 (Time: 10)\nSaving...:  2022-06-09 (Time: 11)\nSaving...:  2022-06-08 (Time: 12)\nSaving...:  2022-06-08 (Time: 13)\nSaving...:  2022-06-08 (Time: 14)\nSaving...:  2022-06-08 (Time: 15)\nSaving...:  2022-06-08 (Time: 16)\nSaving...:  2022-06-08 (Time: 17)\nSaving...:  2022-06-08 (Time: 18)\nSaving...:  2022-06-08 (Time: 19)\nSaving...:  2022-06-08 (Time: 20)\nSaving...:  2022-06-08 (Time: 21)\nSaving...:  2022-06-08 (Time: 22)\nSaving...:  2022-06-08 (Time: 23)\nSaving...:  2022-06-08 (Time: 0)\nSaving...:  2022-06-08 (Time: 1)\nSaving...:  2022-06-08 (Time: 2)\nSaving...:  2022-06-08 (Time: 3)\nSaving...:  2022-06-08 (Time: 4)\nSaving...:  2022-06-08 (Time: 5)\nSaving...:  2022-06-08 (Time: 6)\nSaving...:  2022-06-08 (Time: 7)\nSaving...:  2022-06-08 (Time: 8)\nSaving...:  2022-06-08 (Time: 9)\nSaving...:  2022-06-08 (Time: 10)\nSaving...:  2022-06-08 (Time: 11)\nSaving...:  2022-06-07 (Time: 12)\nSaving...:  2022-06-07 (Time: 13)\nSaving...:  2022-06-07 (Time: 14)\nSaving...:  2022-06-07 (Time: 15)\nSaving...:  2022-06-07 (Time: 16)\nSaving...:  2022-06-07 (Time: 17)\nSaving...:  2022-06-07 (Time: 18)\nSaving...:  2022-06-07 (Time: 19)\nSaving...:  2022-06-07 (Time: 20)\nSaving...:  2022-06-07 (Time: 21)\nSaving...:  2022-06-07 (Time: 22)\nSaving...:  2022-06-07 (Time: 23)\nSaving...:  2022-06-07 (Time: 0)\nSaving...:  2022-06-07 (Time: 1)\nSaving...:  2022-06-07 (Time: 2)\nSaving...:  2022-06-07 (Time: 3)\nSaving...:  2022-06-07 (Time: 4)\nSaving...:  2022-06-07 (Time: 5)\nSaving...:  2022-06-07 (Time: 6)\nSaving...:  2022-06-07 (Time: 7)\nSaving...:  2022-06-07 (Time: 8)\nSaving...:  2022-06-07 (Time: 9)\nSaving...:  2022-06-07 (Time: 10)\nSaving...:  2022-06-07 (Time: 11)\nSaving...:  2022-06-06 (Time: 12)\nSaving...:  2022-06-06 (Time: 13)\nSaving...:  2022-06-06 (Time: 14)\nSaving...:  2022-06-06 (Time: 15)\nSaving...:  2022-06-06 (Time: 16)\nSaving...:  2022-06-06 (Time: 17)\nSaving...:  2022-06-06 (Time: 18)\nSaving...:  2022-06-06 (Time: 19)\nSaving...:  2022-06-06 (Time: 20)\nSaving...:  2022-06-06 (Time: 21)\nSaving...:  2022-06-06 (Time: 22)\nSaving...:  2022-06-06 (Time: 23)\nSaving...:  2022-06-06 (Time: 0)\nSaving...:  2022-06-06 (Time: 1)\nSaving...:  2022-06-06 (Time: 2)\nSaving...:  2022-06-06 (Time: 3)\nSaving...:  2022-06-06 (Time: 4)\nSaving...:  2022-06-06 (Time: 5)\nSaving...:  2022-06-06 (Time: 6)\nSaving...:  2022-06-06 (Time: 7)\nSaving...:  2022-06-06 (Time: 8)\nSaving...:  2022-06-06 (Time: 9)\nSaving...:  2022-06-06 (Time: 10)\nSaving...:  2022-06-06 (Time: 11)\nSaving...:  2022-06-05 (Time: 12)\nSaving...:  2022-06-05 (Time: 13)\nSaving...:  2022-06-05 (Time: 14)\nSaving...:  2022-06-05 (Time: 15)\nSaving...:  2022-06-05 (Time: 16)\nSaving...:  2022-06-05 (Time: 17)\nSaving...:  2022-06-05 (Time: 18)\nSaving...:  2022-06-05 (Time: 19)\nSaving...:  2022-06-05 (Time: 20)\nSaving...:  2022-06-05 (Time: 21)\nSaving...:  2022-06-05 (Time: 22)\nSaving...:  2022-06-05 (Time: 23)\nSaving...:  2022-06-05 (Time: 0)\nSaving...:  2022-06-05 (Time: 1)\nSaving...:  2022-06-05 (Time: 2)\nSaving...:  2022-06-05 (Time: 3)\nSaving...:  2022-06-05 (Time: 4)\nSaving...:  2022-06-05 (Time: 5)\nSaving...:  2022-06-05 (Time: 6)\nSaving...:  2022-06-05 (Time: 7)\nSaving...:  2022-06-05 (Time: 8)\nSaving...:  2022-06-05 (Time: 9)\nSaving...:  2022-06-05 (Time: 10)\nSaving...:  2022-06-05 (Time: 11)\nSaving...:  2022-06-04 (Time: 12)\nSaving...:  2022-06-04 (Time: 13)\nSaving...:  2022-06-04 (Time: 14)\nSaving...:  2022-06-04 (Time: 15)\nSaving...:  2022-06-04 (Time: 16)\nSaving...:  2022-06-04 (Time: 17)\nSaving...:  2022-06-04 (Time: 18)\nSaving...:  2022-06-04 (Time: 19)\nSaving...:  2022-06-04 (Time: 20)\nSaving...:  2022-06-04 (Time: 21)\nSaving...:  2022-06-04 (Time: 22)\nSaving...:  2022-06-04 (Time: 23)\nSaving...:  2022-06-04 (Time: 0)\nSaving...:  2022-06-04 (Time: 1)\nSaving...:  2022-06-04 (Time: 2)\nSaving...:  2022-06-04 (Time: 3)\nSaving...:  2022-06-04 (Time: 4)\nSaving...:  2022-06-04 (Time: 5)\nSaving...:  2022-06-04 (Time: 6)\nSaving...:  2022-06-04 (Time: 7)\nSaving...:  2022-06-04 (Time: 8)\nSaving...:  2022-06-04 (Time: 9)\nSaving...:  2022-06-04 (Time: 10)\nSaving...:  2022-06-04 (Time: 11)\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060400.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060401.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060402.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060403.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060404.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060405.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060406.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060407.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060408.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060409.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060410.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060411.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060412.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060413.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060414.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060415.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060416.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060417.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060418.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060419.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060420.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060421.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060422.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060423.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060500.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060501.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060502.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060503.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060504.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060505.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060506.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060507.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060508.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060509.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060510.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060511.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060512.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060513.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060514.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060515.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060516.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060517.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060518.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060519.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060520.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060521.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060522.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060523.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060600.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060601.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060602.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060603.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060604.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060605.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060606.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060607.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060608.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060609.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060610.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060611.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060612.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060613.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060614.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060615.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060616.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060617.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060618.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060619.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060620.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060621.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060622.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060623.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060723.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060800.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060801.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060802.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060803.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060804.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060805.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060806.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060807.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060808.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060809.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060810.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060811.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060812.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060813.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060814.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060815.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060816.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060817.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060818.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060819.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060820.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060821.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060822.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060823.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060900.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060901.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060902.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060903.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060904.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060905.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060906.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060907.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060908.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060909.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060910.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060911.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060912.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060913.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060914.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060915.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060916.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060917.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060918.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060919.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060920.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060921.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060922.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022060923.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061000.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061001.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061002.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061003.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061004.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061005.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061006.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061007.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061008.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061009.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061010.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061011.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061012.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061013.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061014.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061015.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061016.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061017.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061018.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061019.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061020.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061021.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061022.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022061023.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060400.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060401.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060402.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060403.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060404.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060405.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060406.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060407.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060408.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060409.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060410.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060411.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060412.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060413.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060414.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060415.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060416.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060417.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060418.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060419.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060420.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060421.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060422.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060423.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060500.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060501.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060502.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060503.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060504.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060505.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060506.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060507.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060508.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060509.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060510.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060511.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060512.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060513.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060514.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060515.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060516.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060517.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060518.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060519.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060520.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060521.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060522.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060523.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060600.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060601.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060602.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060603.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060604.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060605.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060606.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060607.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060608.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060609.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060610.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060611.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060612.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060613.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060614.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060615.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060616.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060617.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060618.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060619.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060620.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060621.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060622.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060623.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060723.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060800.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060801.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060802.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060803.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060804.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060805.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060806.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060807.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060808.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060809.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060810.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060811.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060812.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060813.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060814.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060815.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060816.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060817.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060818.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060819.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060820.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060821.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060822.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060823.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060900.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060901.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060902.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060903.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060904.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060905.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060906.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060907.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060908.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060909.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060910.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060911.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060912.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060913.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060914.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060915.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060916.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060917.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060918.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060919.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060920.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060921.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060922.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022060923.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061000.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061001.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061002.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061003.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061004.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061005.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061006.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061007.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061008.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061009.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061010.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061011.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061012.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061013.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061014.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061015.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061016.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061017.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061018.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061019.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061020.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061021.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061022.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022061023.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nGenerating prediction.gif ...\nffmpeg version 4.2.2 Copyright (c) 2000-2019 the FFmpeg developers\n  built with gcc 9.3.0 (GCC)\n  configuration: --prefix=/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0/ffmpeg-4.2.2-ey --enable-pic --cc=/opt/sw/spack/0.16.0/lib/spack/env/gcc/gcc --cxx=/opt/sw/spack/0.16.0/lib/spack/env/gcc/g++ --enable-libxcb --enable-libxcb-shape --enable-libxcb-shm --enable-libxcb-xfixes --enable-xlib --disable-libfontconfig --disable-libfreetype --disable-libfribidi --enable-bzlib --enable-libmp3lame --enable-libopenjpeg --disable-libopus --enable-libspeex --enable-libvorbis --enable-avresample --enable-openssl --enable-shared --disable-libzmq --disable-libssh --disable-libwebp --disable-lzma --disable-libsnappy --enable-sdl2 --enable-libaom\n  libavutil      56. 31.100 / 56. 31.100\n  libavcodec     58. 54.100 / 58. 54.100\n  libavformat    58. 29.100 / 58. 29.100\n  libavdevice    58.  8.100 / 58.  8.100\n  libavfilter     7. 57.100 /  7. 57.100\n  libavresample   4.  0.  0 /  4.  0.  0\n  libswscale      5.  5.100 /  5.  5.100\n  libswresample   3.  5.100 /  3.  5.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/groups/ESS/aalnaim/cmaq/prediction.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:16.80, start: 0.000000, bitrate: 7654 kb/s\n    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 2000x1808, 7653 kb/s, 10 fps, 10 tbr, 10240 tbn, 20 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\nOutput #0, gif, to '/groups/ESS/aalnaim/cmaq/prediction.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n    Stream #0:0(und): Video: gif, pal8, 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn, 10 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\n      encoder         : Lavc58.54.100 gif\nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \n\u001B[1;32m[Parsed_palettegen_2 @ 0x204ab40] \u001B[0m255(+1) colors generated out of 477188 colors; ratio=0.000534\n\u001B[1;32m[Parsed_palettegen_2 @ 0x204ab40] \u001B[0m\u001B[0;33mDupped color: FF48A66C\n\u001B[0mframe=    1 fps=0.2 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00174x    \nframe=    6 fps=0.9 q=-0.0 size=    3072kB time=00:00:00.51 bitrate=49344.8kbits/s speed=0.0805x    \nframe=   10 fps=1.5 q=-0.0 size=    5376kB time=00:00:00.91 bitrate=48395.8kbits/s speed=0.132x    \nframe=   14 fps=1.9 q=-0.0 size=    7424kB time=00:00:01.31 bitrate=46425.5kbits/s speed=0.176x    \nframe=   18 fps=2.2 q=-0.0 size=    9728kB time=00:00:01.71 bitrate=46603.4kbits/s speed=0.214x    \nframe=   22 fps=2.6 q=-0.0 size=   12288kB time=00:00:02.11 bitrate=47707.7kbits/s speed=0.245x    \nframe=   26 fps=2.8 q=-0.0 size=   15104kB time=00:00:02.51 bitrate=49295.6kbits/s speed=0.273x    \nframe=   30 fps=3.1 q=-0.0 size=   17408kB time=00:00:02.91 bitrate=49005.6kbits/s speed=0.299x    \nframe=   34 fps=3.3 q=-0.0 size=   19712kB time=00:00:03.31 bitrate=48785.7kbits/s speed=0.323x    \nframe=   38 fps=3.5 q=-0.0 size=   21760kB time=00:00:03.71 bitrate=48048.0kbits/s speed=0.343x    \nframe=   42 fps=3.7 q=-0.0 size=   24064kB time=00:00:04.11 bitrate=47964.1kbits/s speed=0.363x    \nframe=   46 fps=3.9 q=-0.0 size=   26624kB time=00:00:04.51 bitrate=48360.0kbits/s speed=0.378x    \nframe=   50 fps=4.0 q=-0.0 size=   29184kB time=00:00:04.91 bitrate=48691.5kbits/s speed=0.392x    \nframe=   54 fps=4.1 q=-0.0 size=   31744kB time=00:00:05.31 bitrate=48973.0kbits/s speed=0.407x    \nframe=   58 fps=4.3 q=-0.0 size=   34048kB time=00:00:05.71 bitrate=48847.8kbits/s speed=0.42x    \nframe=   62 fps=4.4 q=-0.0 size=   36096kB time=00:00:06.11 bitrate=48395.8kbits/s speed=0.432x    \nframe=   66 fps=4.5 q=-0.0 size=   38400kB time=00:00:06.51 bitrate=48321.5kbits/s speed=0.444x    \nframe=   70 fps=4.6 q=-0.0 size=   40960kB time=00:00:06.91 bitrate=48559.2kbits/s speed=0.452x    \nframe=   74 fps=4.7 q=-0.0 size=   43520kB time=00:00:07.31 bitrate=48771.0kbits/s speed=0.461x    \nframe=   78 fps=4.8 q=-0.0 size=   46080kB time=00:00:07.71 bitrate=48960.7kbits/s speed=0.47x    \nframe=   82 fps=4.8 q=-0.0 size=   48384kB time=00:00:08.11 bitrate=48873.2kbits/s speed=0.479x    \nframe=   86 fps=4.9 q=-0.0 size=   50432kB time=00:00:08.51 bitrate=48547.5kbits/s speed=0.487x    \nframe=   90 fps=5.0 q=-0.0 size=   52736kB time=00:00:08.91 bitrate=48486.3kbits/s speed=0.494x    \nframe=   94 fps=5.0 q=-0.0 size=   55296kB time=00:00:09.31 bitrate=48655.7kbits/s speed= 0.5x    \nframe=   98 fps=5.1 q=-0.0 size=   58112kB time=00:00:09.71 bitrate=49027.1kbits/s speed=0.506x    \nframe=  102 fps=5.2 q=-0.0 size=   60416kB time=00:00:10.11 bitrate=48954.3kbits/s speed=0.512x    \nframe=  106 fps=5.2 q=-0.0 size=   62720kB time=00:00:10.51 bitrate=48887.0kbits/s speed=0.518x    \nframe=  110 fps=5.3 q=-0.0 size=   64768kB time=00:00:10.91 bitrate=48632.4kbits/s speed=0.524x    \nframe=  114 fps=5.3 q=-0.0 size=   67072kB time=00:00:11.31 bitrate=48581.2kbits/s speed=0.529x    \nframe=  118 fps=5.4 q=-0.0 size=   69632kB time=00:00:11.71 bitrate=48712.7kbits/s speed=0.534x    \nframe=  122 fps=5.4 q=-0.0 size=   72448kB time=00:00:12.11 bitrate=49008.6kbits/s speed=0.538x    \nframe=  126 fps=5.5 q=-0.0 size=   74752kB time=00:00:12.51 bitrate=48950.3kbits/s speed=0.543x    \nframe=  130 fps=5.5 q=-0.0 size=   77056kB time=00:00:12.91 bitrate=48895.6kbits/s speed=0.547x    \nframe=  134 fps=5.6 q=-0.0 size=   79104kB time=00:00:13.31 bitrate=48686.7kbits/s speed=0.552x    \nframe=  138 fps=5.6 q=-0.0 size=   81408kB time=00:00:13.71 bitrate=48642.9kbits/s speed=0.556x    \nframe=  142 fps=5.6 q=-0.0 size=   83968kB time=00:00:14.11 bitrate=48750.2kbits/s speed=0.559x    \nframe=  146 fps=5.7 q=-0.0 size=   86784kB time=00:00:14.51 bitrate=48996.2kbits/s speed=0.562x    \nframe=  150 fps=5.7 q=-0.0 size=   89088kB time=00:00:14.91 bitrate=48947.6kbits/s speed=0.566x    \nframe=  154 fps=5.7 q=-0.0 size=   91392kB time=00:00:15.31 bitrate=48901.6kbits/s speed=0.569x    \nframe=  158 fps=5.8 q=-0.0 size=   93440kB time=00:00:15.71 bitrate=48724.4kbits/s speed=0.572x    \nframe=  162 fps=5.8 q=-0.0 size=   95744kB time=00:00:16.11 bitrate=48686.2kbits/s speed=0.576x    \nframe=  166 fps=5.8 q=-0.0 size=   98560kB time=00:00:16.51 bitrate=48903.9kbits/s speed=0.578x    \nframe=  167 fps=5.8 q=-0.0 Lsize=   99903kB time=00:00:16.61 bitrate=49271.8kbits/s speed=0.575x    \nvideo:99903kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000020%\nDone prediction.gif !!!\nGenerating predctionAirNow.gif ...\nffmpeg version 4.2.2 Copyright (c) 2000-2019 the FFmpeg developers\n  built with gcc 9.3.0 (GCC)\n  configuration: --prefix=/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0/ffmpeg-4.2.2-ey --enable-pic --cc=/opt/sw/spack/0.16.0/lib/spack/env/gcc/gcc --cxx=/opt/sw/spack/0.16.0/lib/spack/env/gcc/g++ --enable-libxcb --enable-libxcb-shape --enable-libxcb-shm --enable-libxcb-xfixes --enable-xlib --disable-libfontconfig --disable-libfreetype --disable-libfribidi --enable-bzlib --enable-libmp3lame --enable-libopenjpeg --disable-libopus --enable-libspeex --enable-libvorbis --enable-avresample --enable-openssl --enable-shared --disable-libzmq --disable-libssh --disable-libwebp --disable-lzma --disable-libsnappy --enable-sdl2 --enable-libaom\n  libavutil      56. 31.100 / 56. 31.100\n  libavcodec     58. 54.100 / 58. 54.100\n  libavformat    58. 29.100 / 58. 29.100\n  libavdevice    58.  8.100 / 58.  8.100\n  libavfilter     7. 57.100 /  7. 57.100\n  libavresample   4.  0.  0 /  4.  0.  0\n  libswscale      5.  5.100 /  5.  5.100\n  libswresample   3.  5.100 /  3.  5.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:16.80, start: 0.000000, bitrate: 8060 kb/s\n    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 2000x1808, 8059 kb/s, 10 fps, 10 tbr, 10240 tbn, 20 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\nOutput #0, gif, to '/groups/ESS/aalnaim/cmaq/predctionAirNow.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n    Stream #0:0(und): Video: gif, pal8, 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn, 10 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\n      encoder         : Lavc58.54.100 gif\nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \n\u001B[1;32m[Parsed_palettegen_2 @ 0x2880f00] \u001B[0m255(+1) colors generated out of 1018539 colors; ratio=0.000250\nframe=    1 fps=0.1 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.0013x    \nframe=    5 fps=0.6 q=-0.0 size=    2560kB time=00:00:00.41 bitrate=51150.0kbits/s speed=0.0498x    \nframe=    9 fps=1.0 q=-0.0 size=    5120kB time=00:00:00.81 bitrate=51781.5kbits/s speed=0.0912x    \nframe=   13 fps=1.4 q=-0.0 size=    7424kB time=00:00:01.21 bitrate=50262.3kbits/s speed=0.127x    \nframe=   17 fps=1.7 q=-0.0 size=    9728kB time=00:00:01.61 bitrate=49498.0kbits/s speed=0.158x    \nframe=   20 fps=1.9 q=-0.0 size=   11520kB time=00:00:01.91 bitrate=49409.3kbits/s speed=0.178x    \nframe=   23 fps=2.0 q=-0.0 size=   13568kB time=00:00:02.21 bitrate=50293.7kbits/s speed=0.197x    \nframe=   26 fps=2.2 q=-0.0 size=   15616kB time=00:00:02.51 bitrate=50966.6kbits/s speed=0.214x    \nframe=   30 fps=2.4 q=-0.0 size=   18176kB time=00:00:02.91 bitrate=51167.6kbits/s speed=0.235x    \nframe=   34 fps=2.6 q=-0.0 size=   20736kB time=00:00:03.31 bitrate=51320.0kbits/s speed=0.254x    \nframe=   38 fps=2.8 q=-0.0 size=   23040kB time=00:00:03.71 bitrate=50874.3kbits/s speed=0.271x    \nframe=   42 fps=2.9 q=-0.0 size=   25344kB time=00:00:04.11 bitrate=50515.3kbits/s speed=0.287x    \nframe=   45 fps=3.0 q=-0.0 size=   27392kB time=00:00:04.41 bitrate=50883.3kbits/s speed=0.297x    \nframe=   48 fps=3.1 q=-0.0 size=   29184kB time=00:00:04.71 bitrate=50759.1kbits/s speed=0.306x    \nframe=   52 fps=3.2 q=-0.0 size=   32000kB time=00:00:05.11 bitrate=51300.2kbits/s speed=0.318x    \nframe=   56 fps=3.4 q=-0.0 size=   34304kB time=00:00:05.51 bitrate=51001.5kbits/s speed=0.33x    \nframe=   59 fps=3.4 q=-0.0 size=   36096kB time=00:00:05.81 bitrate=50894.7kbits/s speed=0.337x    \nframe=   62 fps=3.5 q=-0.0 size=   37888kB time=00:00:06.11 bitrate=50798.4kbits/s speed=0.345x    \nframe=   66 fps=3.6 q=-0.0 size=   40192kB time=00:00:06.51 bitrate=50576.5kbits/s speed=0.354x    \nframe=   69 fps=3.6 q=-0.0 size=   42240kB time=00:00:06.81 bitrate=50812.1kbits/s speed=0.36x    \nframe=   72 fps=3.7 q=-0.0 size=   44288kB time=00:00:07.11 bitrate=51027.7kbits/s speed=0.365x    \nframe=   75 fps=3.8 q=-0.0 size=   46336kB time=00:00:07.41 bitrate=51226.0kbits/s speed=0.371x    \nframe=   78 fps=3.8 q=-0.0 size=   48128kB time=00:00:07.71 bitrate=51136.8kbits/s speed=0.377x    \nframe=   82 fps=3.9 q=-0.0 size=   50688kB time=00:00:08.11 bitrate=51200.5kbits/s speed=0.384x    \nframe=   85 fps=3.9 q=-0.0 size=   52224kB time=00:00:08.41 bitrate=50870.3kbits/s speed=0.389x    \nframe=   89 fps=4.0 q=-0.0 size=   54528kB time=00:00:08.81 bitrate=50703.0kbits/s speed=0.395x    \nframe=   92 fps=4.0 q=-0.0 size=   56576kB time=00:00:09.11 bitrate=50874.9kbits/s speed= 0.4x    \nframe=   95 fps=4.1 q=-0.0 size=   58624kB time=00:00:09.41 bitrate=51035.9kbits/s speed=0.403x    \nframe=   98 fps=4.1 q=-0.0 size=   60672kB time=00:00:09.71 bitrate=51186.9kbits/s speed=0.407x    \nframe=  102 fps=4.2 q=-0.0 size=   63232kB time=00:00:10.11 bitrate=51236.1kbits/s speed=0.413x    \nframe=  105 fps=4.2 q=-0.0 size=   65024kB time=00:00:10.41 bitrate=51169.7kbits/s speed=0.416x    \nframe=  108 fps=4.2 q=-0.0 size=   66816kB time=00:00:10.71 bitrate=51107.1kbits/s speed=0.42x    \nframe=  112 fps=4.3 q=-0.0 size=   69120kB time=00:00:11.11 bitrate=50965.9kbits/s speed=0.424x    \nframe=  116 fps=4.3 q=-0.0 size=   71680kB time=00:00:11.51 bitrate=51016.7kbits/s speed=0.429x    \nframe=  119 fps=4.3 q=-0.0 size=   73472kB time=00:00:11.81 bitrate=50963.8kbits/s speed=0.432x    \nframe=  122 fps=4.4 q=-0.0 size=   75520kB time=00:00:12.11 bitrate=51086.7kbits/s speed=0.434x    \nframe=  126 fps=4.4 q=-0.0 size=   78080kB time=00:00:12.51 bitrate=51129.6kbits/s speed=0.439x    \nframe=  130 fps=4.5 q=-0.0 size=   80384kB time=00:00:12.91 bitrate=51007.4kbits/s speed=0.442x    \nframe=  133 fps=4.5 q=-0.0 size=   82176kB time=00:00:13.21 bitrate=50960.3kbits/s speed=0.445x    \nframe=  137 fps=4.5 q=-0.0 size=   84480kB time=00:00:13.61 bitrate=50849.4kbits/s speed=0.449x    \nframe=  140 fps=4.5 q=-0.0 size=   86528kB time=00:00:13.91 bitrate=50958.8kbits/s speed=0.451x    \nframe=  143 fps=4.6 q=-0.0 size=   88576kB time=00:00:14.21 bitrate=51063.7kbits/s speed=0.453x    \nframe=  146 fps=4.6 q=-0.0 size=   90368kB time=00:00:14.51 bitrate=51019.6kbits/s speed=0.455x    \nframe=  150 fps=4.6 q=-0.0 size=   93184kB time=00:00:14.91 bitrate=51198.1kbits/s speed=0.458x    \nframe=  154 fps=4.6 q=-0.0 size=   95488kB time=00:00:15.31 bitrate=51093.3kbits/s speed=0.461x    \nframe=  157 fps=4.7 q=-0.0 size=   97280kB time=00:00:15.61 bitrate=51051.7kbits/s speed=0.463x    \nframe=  161 fps=4.7 q=-0.0 size=   99584kB time=00:00:16.01 bitrate=50955.2kbits/s speed=0.466x    \nframe=  164 fps=4.7 q=-0.0 size=  101632kB time=00:00:16.31 bitrate=51046.6kbits/s speed=0.468x    \nframe=  167 fps=4.7 q=-0.0 size=  103424kB time=00:00:16.61 bitrate=51008.4kbits/s speed=0.469x    \nframe=  167 fps=4.7 q=-0.0 Lsize=  104349kB time=00:00:16.61 bitrate=51464.4kbits/s speed=0.467x    \nvideo:104348kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000019%\nDone predctionAirNow.gif !!!\n",
  "history_begin_time" : 1655086084174,
  "history_end_time" : 1655140838437,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "8MzXVqAjfutP",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving...: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t_Airnow), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    print(\"Saving...: \", plotTitle)\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_\" + str(t_Airnow) + \".tif\")\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\nprint(\"Generating prediction.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\nprint(\"Done prediction.gif !!!\")\n\nprint(\"Generating predctionAirNow.gif ...\")\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\nprint(\"Done predctionAirNow.gif !!!\")\n\n",
  "history_output" : null,
  "history_begin_time" : 1655086021362,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : null
},{
  "history_id" : "kekOPnezBZg2",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t_Airnow), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_\" + str(t_Airnow) + \".tif\")\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\n",
  "history_begin_time" : 1655079456779,
  "history_end_time" : 1655086051413,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "BAO9J6BPVVbI",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\"):\n    for file in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(\"/groups/ESS/aalnaim/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t_Airnow), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_\" + str(t_Airnow) + \".tif\")\n    \n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "Running",
  "history_begin_time" : 1655074546095,
  "history_end_time" : 1655074618211,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "10tLFD7OwF94",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system(\"module load ffmpeg\")\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052600.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052601.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052602.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052603.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052604.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052605.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052606.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052607.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052608.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052609.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052610.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052611.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052612.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052613.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052614.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052615.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052616.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052617.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052618.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052619.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052620.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052621.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052622.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052623.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052723.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052723.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nffmpeg version 4.2.2 Copyright (c) 2000-2019 the FFmpeg developers\n  built with gcc 9.3.0 (GCC)\n  configuration: --prefix=/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0/ffmpeg-4.2.2-ey --enable-pic --cc=/opt/sw/spack/0.16.0/lib/spack/env/gcc/gcc --cxx=/opt/sw/spack/0.16.0/lib/spack/env/gcc/g++ --enable-libxcb --enable-libxcb-shape --enable-libxcb-shm --enable-libxcb-xfixes --enable-xlib --disable-libfontconfig --disable-libfreetype --disable-libfribidi --enable-bzlib --enable-libmp3lame --enable-libopenjpeg --disable-libopus --enable-libspeex --enable-libvorbis --enable-avresample --enable-openssl --enable-shared --disable-libzmq --disable-libssh --disable-libwebp --disable-lzma --disable-libsnappy --enable-sdl2 --enable-libaom\n  libavutil      56. 31.100 / 56. 31.100\n  libavcodec     58. 54.100 / 58. 54.100\n  libavformat    58. 29.100 / 58. 29.100\n  libavdevice    58.  8.100 / 58.  8.100\n  libavfilter     7. 57.100 /  7. 57.100\n  libavresample   4.  0.  0 /  4.  0.  0\n  libswscale      5.  5.100 /  5.  5.100\n  libswresample   3.  5.100 /  3.  5.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/groups/ESS/aalnaim/cmaq/prediction.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:04.80, start: 0.000000, bitrate: 7417 kb/s\n    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 2000x1808, 7415 kb/s, 10 fps, 10 tbr, 10240 tbn, 20 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\nOutput #0, gif, to '/groups/ESS/aalnaim/cmaq/prediction.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n    Stream #0:0(und): Video: gif, pal8, 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn, 10 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\n      encoder         : Lavc58.54.100 gif\nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \n\u001B[1;32m[Parsed_palettegen_2 @ 0xe9ac80] \u001B[0m255(+1) colors generated out of 351763 colors; ratio=0.000725\nframe=    1 fps=0.6 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00552x    \nframe=    6 fps=2.6 q=-0.0 size=    3072kB time=00:00:00.51 bitrate=49344.8kbits/s speed=0.217x    \nframe=   10 fps=3.5 q=-0.0 size=    5376kB time=00:00:00.91 bitrate=48395.8kbits/s speed=0.318x    \nframe=   14 fps=4.1 q=-0.0 size=    7680kB time=00:00:01.31 bitrate=48026.4kbits/s speed=0.387x    \nframe=   18 fps=4.6 q=-0.0 size=   10240kB time=00:00:01.71 bitrate=49056.2kbits/s speed=0.44x    \nframe=   22 fps=4.9 q=-0.0 size=   12800kB time=00:00:02.11 bitrate=49695.5kbits/s speed=0.475x    \nframe=   26 fps=5.2 q=-0.0 size=   15360kB time=00:00:02.51 bitrate=50131.1kbits/s speed=0.503x    \nframe=   31 fps=5.5 q=-0.0 size=   18432kB time=00:00:03.01 bitrate=50164.4kbits/s speed=0.538x    \nframe=   35 fps=5.7 q=-0.0 size=   20736kB time=00:00:03.41 bitrate=49815.0kbits/s speed=0.559x    \nframe=   39 fps=5.9 q=-0.0 size=   23040kB time=00:00:03.81 bitrate=49539.0kbits/s speed=0.576x    \nframe=   43 fps=6.0 q=-0.0 size=   25600kB time=00:00:04.21 bitrate=49813.6kbits/s speed=0.592x    \nframe=   47 fps=6.1 q=-0.0 size=   28160kB time=00:00:04.61 bitrate=50040.5kbits/s speed=0.601x    \nframe=   47 fps=6.0 q=-0.0 Lsize=   28948kB time=00:00:04.61 bitrate=51440.5kbits/s speed=0.591x    \nvideo:28948kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000067%\nffmpeg version 4.2.2 Copyright (c) 2000-2019 the FFmpeg developers\n  built with gcc 9.3.0 (GCC)\n  configuration: --prefix=/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0/ffmpeg-4.2.2-ey --enable-pic --cc=/opt/sw/spack/0.16.0/lib/spack/env/gcc/gcc --cxx=/opt/sw/spack/0.16.0/lib/spack/env/gcc/g++ --enable-libxcb --enable-libxcb-shape --enable-libxcb-shm --enable-libxcb-xfixes --enable-xlib --disable-libfontconfig --disable-libfreetype --disable-libfribidi --enable-bzlib --enable-libmp3lame --enable-libopenjpeg --disable-libopus --enable-libspeex --enable-libvorbis --enable-avresample --enable-openssl --enable-shared --disable-libzmq --disable-libssh --disable-libwebp --disable-lzma --disable-libsnappy --enable-sdl2 --enable-libaom\n  libavutil      56. 31.100 / 56. 31.100\n  libavcodec     58. 54.100 / 58. 54.100\n  libavformat    58. 29.100 / 58. 29.100\n  libavdevice    58.  8.100 / 58.  8.100\n  libavfilter     7. 57.100 /  7. 57.100\n  libavresample   4.  0.  0 /  4.  0.  0\n  libswscale      5.  5.100 /  5.  5.100\n  libswresample   3.  5.100 /  3.  5.100\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from '/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n  Duration: 00:00:02.40, start: 0.000000, bitrate: 7315 kb/s\n    Stream #0:0(und): Video: h264 (High) (avc1 / 0x31637661), yuv420p, 2000x1808, 7311 kb/s, 10 fps, 10 tbr, 10240 tbn, 20 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\nStream mapping:\n  Stream #0:0 -> #0:0 (h264 (native) -> gif (native))\nPress [q] to stop, [?] for help\nOutput #0, gif, to '/groups/ESS/aalnaim/cmaq/predctionAirNow.gif':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf58.29.100\n    Stream #0:0(und): Video: gif, pal8, 2000x1808, q=2-31, 200 kb/s, 10 fps, 100 tbn, 10 tbc (default)\n    Metadata:\n      handler_name    : VideoHandler\n      encoder         : Lavc58.54.100 gif\nframe=    0 fps=0.0 q=0.0 size=       0kB time=00:00:00.00 bitrate=N/A speed=   0x    \n\u001B[1;32m[Parsed_palettegen_2 @ 0xa3b380] \u001B[0m255(+1) colors generated out of 611797 colors; ratio=0.000417\nframe=    1 fps=0.6 q=-0.0 size=       0kB time=00:00:00.01 bitrate=   0.0kbits/s speed=0.00629x    \nframe=    6 fps=2.7 q=-0.0 size=    3072kB time=00:00:00.51 bitrate=49344.8kbits/s speed=0.23x    \nframe=   10 fps=3.6 q=-0.0 size=    5376kB time=00:00:00.91 bitrate=48395.8kbits/s speed=0.325x    \nframe=   14 fps=4.1 q=-0.0 size=    7936kB time=00:00:01.31 bitrate=49627.3kbits/s speed=0.384x    \nframe=   18 fps=4.5 q=-0.0 size=   10240kB time=00:00:01.71 bitrate=49056.2kbits/s speed=0.428x    \nframe=   22 fps=4.7 q=-0.0 size=   12800kB time=00:00:02.11 bitrate=49695.5kbits/s speed=0.453x    \nframe=   23 fps=4.6 q=-0.0 Lsize=   14231kB time=00:00:02.21 bitrate=52750.5kbits/s speed=0.442x    \nvideo:14231kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.000137%\n",
  "history_begin_time" : 1654612325236,
  "history_end_time" : 1654616699751,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "n74KG3f7cCSj",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system(\"module load ffmpeg\")\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg; ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "ffmpeg version 4.2.2 Copyright (c) 2000-2019 the FFmpeg developers\n  built with gcc 9.3.0 (GCC)\n  configuration: --prefix=/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0/ffmpeg-4.2.2-ey --enable-pic --cc=/opt/sw/spack/0.16.0/lib/spack/env/gcc/gcc --cxx=/opt/sw/spack/0.16.0/lib/spack/env/gcc/g++ --enable-libxcb --enable-libxcb-shape --enable-libxcb-shm --enable-libxcb-xfixes --enable-xlib --disable-libfontconfig --disable-libfreetype --disable-libfribidi --enable-bzlib --enable-libmp3lame --enable-libopenjpeg --disable-libopus --enable-libspeex --enable-libvorbis --enable-avresample --enable-openssl --enable-shared --disable-libzmq --disable-libssh --disable-libwebp --disable-lzma --disable-libsnappy --enable-sdl2 --enable-libaom\n  libavutil      56. 31.100 / 56. 31.100\n  libavcodec     58. 54.100 / 58. 54.100\n  libavformat    58. 29.100 / 58. 29.100\n  libavdevice    58.  8.100 / 58.  8.100\n  libavfilter     7. 57.100 /  7. 57.100\n  libavresample   4.  0.  0 /  4.  0.  0\n  libswscale      5.  5.100 /  5.  5.100\n  libswresample   3.  5.100 /  3.  5.100\n\u001B[1;31m/groups/ESS/aalnaim/cmaq/prediction.mp4: No such file or directory\n\u001B[0mrm: cannot remove '/groups/ESS/aalnaim/cmaq/prediction.mp4': No such file or directory\nffmpeg version 4.2.2 Copyright (c) 2000-2019 the FFmpeg developers\n  built with gcc 9.3.0 (GCC)\n  configuration: --prefix=/opt/sw/spack/apps/linux-centos8-cascadelake/gcc-9.3.0/ffmpeg-4.2.2-ey --enable-pic --cc=/opt/sw/spack/0.16.0/lib/spack/env/gcc/gcc --cxx=/opt/sw/spack/0.16.0/lib/spack/env/gcc/g++ --enable-libxcb --enable-libxcb-shape --enable-libxcb-shm --enable-libxcb-xfixes --enable-xlib --disable-libfontconfig --disable-libfreetype --disable-libfribidi --enable-bzlib --enable-libmp3lame --enable-libopenjpeg --disable-libopus --enable-libspeex --enable-libvorbis --enable-avresample --enable-openssl --enable-shared --disable-libzmq --disable-libssh --disable-libwebp --disable-lzma --disable-libsnappy --enable-sdl2 --enable-libaom\n  libavutil      56. 31.100 / 56. 31.100\n  libavcodec     58. 54.100 / 58. 54.100\n  libavformat    58. 29.100 / 58. 29.100\n  libavdevice    58.  8.100 / 58.  8.100\n  libavfilter     7. 57.100 /  7. 57.100\n  libavresample   4.  0.  0 /  4.  0.  0\n  libswscale      5.  5.100 /  5.  5.100\n  libswresample   3.  5.100 /  3.  5.100\n\u001B[1;31m/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4: No such file or directory\n\u001B[0mrm: cannot remove '/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4': No such file or directory\n",
  "history_begin_time" : 1654612249570,
  "history_end_time" : 1654616699120,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "jWtjlHGcemUf",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\nsubprocess.Popen([\"module load ffmpeg\"], shell=True)\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052600.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052601.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052602.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052603.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052604.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052605.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052606.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052607.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052608.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052609.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052610.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052611.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052612.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052613.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052614.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052615.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052616.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052617.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052618.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052619.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052620.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052621.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052622.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052623.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052723.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052723.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nsh: ffmpeg: command not found\nsh: ffmpeg: command not found\n",
  "history_begin_time" : 1654543238091,
  "history_end_time" : 1654612056260,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "AeZ2UVbaKt7h",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\nsubprocess.run([\"module load ffmpeg\"], shell=True)\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052600.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052601.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052602.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052603.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052604.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052605.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052606.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052607.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052608.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052609.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052610.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052611.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052612.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052613.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052614.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052615.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052616.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052617.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052618.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052619.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052620.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052621.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052622.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052623.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052723.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052723.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nsh: ffmpeg: command not found\nsh: ffmpeg: command not found\n",
  "history_begin_time" : 1654543129781,
  "history_end_time" : 1654612055692,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "nFQHSJwfBoGv",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\nsubprocess.run([\"module load ffmpeg\"])\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 18, in <module>\n    subprocess.run([\"module load ffmpeg\"])\n  File \"/opt/sw/spack/apps/linux-centos8-x86_64/gcc-9.3.0/python-3.8.6-ff/lib/python3.8/subprocess.py\", line 489, in run\n    with Popen(*popenargs, **kwargs) as process:\n  File \"/opt/sw/spack/apps/linux-centos8-x86_64/gcc-9.3.0/python-3.8.6-ff/lib/python3.8/subprocess.py\", line 854, in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n  File \"/opt/sw/spack/apps/linux-centos8-x86_64/gcc-9.3.0/python-3.8.6-ff/lib/python3.8/subprocess.py\", line 1702, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\nFileNotFoundError: [Errno 2] No such file or directory: 'module load ffmpeg'\n",
  "history_begin_time" : 1654543056266,
  "history_end_time" : 1654612054724,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "XAuF3xRdZNul",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\nimport subprocess\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\nsubprocess.run([\"module\", \"load\", \"ffmpeg\"])\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 18, in <module>\n    subprocess.run([\"module\", \"load\", \"ffmpeg\"])\n  File \"/opt/sw/spack/apps/linux-centos8-x86_64/gcc-9.3.0/python-3.8.6-ff/lib/python3.8/subprocess.py\", line 489, in run\n    with Popen(*popenargs, **kwargs) as process:\n  File \"/opt/sw/spack/apps/linux-centos8-x86_64/gcc-9.3.0/python-3.8.6-ff/lib/python3.8/subprocess.py\", line 854, in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n  File \"/opt/sw/spack/apps/linux-centos8-x86_64/gcc-9.3.0/python-3.8.6-ff/lib/python3.8/subprocess.py\", line 1702, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\nFileNotFoundError: [Errno 2] No such file or directory: 'module'\n",
  "history_begin_time" : 1654542992068,
  "history_end_time" : 1654612054306,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "7S2WHoRQempe",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('module load ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052600.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052601.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052602.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052603.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052604.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052605.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052606.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052607.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052608.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052609.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052610.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052611.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052612.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052613.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052614.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052615.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052616.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052617.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052618.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052619.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052620.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052621.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052622.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052623.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052723.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052723.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nLmod has detected the following error: The following module(s) are unknown:\n\"/groups/ESS/aalnaim/cmaq/prediction.mp4\"\n\"/groups/ESS/aalnaim/cmaq/prediction.gif\"\n\"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse,\nfps=10\"\n\nPlease check the spelling or version number. Also try \"module spider ...\"\nIt is also possible your cache file is out-of-date; it may help to try:\n  $ module --ignore-cache load \"/groups/ESS/aalnaim/cmaq/prediction.mp4\"\n\"/groups/ESS/aalnaim/cmaq/prediction.gif\"\n\"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse,\nfps=10\"\n\nAlso make sure that all modulefiles written in TCL start with the string\n#%Module\n\n\n\nLmod has detected the following error: The following module(s) are unknown:\n\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\"\n\"/groups/ESS/aalnaim/cmaq/predctionAirNow.gif\"\n\"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse,\nfps=10\"\n\nPlease check the spelling or version number. Also try \"module spider ...\"\nIt is also possible your cache file is out-of-date; it may help to try:\n  $ module --ignore-cache load \"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\"\n\"/groups/ESS/aalnaim/cmaq/predctionAirNow.gif\"\n\"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse,\nfps=10\"\n\nAlso make sure that all modulefiles written in TCL start with the string\n#%Module\n\n\n\n",
  "history_begin_time" : 1654542816465,
  "history_end_time" : 1654612053775,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "n6gawnwlgjz",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052600.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052601.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052602.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052603.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052604.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052605.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052606.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052607.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052608.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052609.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052610.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052611.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052612.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052613.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052614.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052615.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052616.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052617.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052618.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052619.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052620.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052621.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052622.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052623.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052723.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052723.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nsh: ffmpeg: command not found\nsh: ffmpeg: command not found\n",
  "history_begin_time" : 1654542716355,
  "history_end_time" : 1654542762828,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "n7D7FuOYZu5v",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n\nos.system('module load ffmpeg') # Uncomment if running on HOPPER\nos.system('ffmpeg')\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "sh: ffmpeg: command not found\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052600.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052601.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052602.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052603.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052604.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052605.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052606.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052607.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052608.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052609.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052610.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052611.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052612.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052613.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052614.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052615.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052616.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052617.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052618.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052619.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052620.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052621.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052622.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052623.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052723.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052723.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nsh: ffmpeg: command not found\nsh: ffmpeg: command not found\n",
  "history_begin_time" : 1654542260336,
  "history_end_time" : 1654616701091,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "ruL054c6Kkyh",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\nos.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_2022052723.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nsh: ffmpeg: command not found\nsh: ffmpeg: command not found\n",
  "history_begin_time" : 1654541264666,
  "history_end_time" : 1654616701806,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "5RTy9WcP8aXY",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\nos.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 53, in <module>\n    imageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/imageio/v2.py\", line 331, in mimwrite\n    return file.write(ims, **kwargs)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/imageio/core/legacy_plugin_wrapper.py\", line 187, in write\n    raise RuntimeError(\"Zero images were written.\")\nRuntimeError: Zero images were written.\n",
  "history_begin_time" : 1654541069223,
  "history_end_time" : 1655141009325,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "OsNeV3ihkRmE",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\nos.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052600.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052601.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052602.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052603.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052604.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052605.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052606.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052607.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052608.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052609.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052610.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052611.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052612.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052613.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052614.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052615.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052616.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052617.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052618.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052619.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052620.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052621.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052622.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052623.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052700.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052701.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052702.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052703.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052704.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052705.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052706.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052707.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052708.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052709.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052710.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052711.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052712.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052713.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052714.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052715.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052716.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052717.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052718.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052719.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052720.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052721.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052722.tif\n/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_2022052723.tif\nIMAGEIO FFMPEG_WRITER WARNING: input image is not divisible by macro_block_size=16, resizing from (2000, 1800) to (2000, 1808) to ensure video compatibility with most codecs and players. To prevent resizing, make your input image divisible by the macro_block_size or set the macro_block_size to 1 (risking incompatibility).\nTraceback (most recent call last):\n  File \"prediction_maps.py\", line 67, in <module>\n    imageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/imageio/v2.py\", line 331, in mimwrite\n    return file.write(ims, **kwargs)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/imageio/core/legacy_plugin_wrapper.py\", line 187, in write\n    raise RuntimeError(\"Zero images were written.\")\nRuntimeError: Zero images were written.\n",
  "history_begin_time" : 1654540922740,
  "history_end_time" : 1655141010052,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "uokU0G6ljr7D",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\nos.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : null,
  "history_begin_time" : 1654540891652,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : null
},{
  "history_id" : "CGQzJQjhEbCj",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\nos.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_\" + str(t) + \".tif\")\n    \nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave('/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\n",
  "history_begin_time" : 1654537256684,
  "history_end_time" : 1654540891689,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "btjgotj4IVOm",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\nos.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_\" + str(t) + \".tif\")\n    \nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "  File \"prediction_maps.py\", line 110\n    imageio.mimsave(\"/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n                                                                             ^\nSyntaxError: EOL while scanning string literal\n",
  "history_begin_time" : 1654536959895,
  "history_end_time" : 1654537090230,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "2x6aznc7yzz",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\nos.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv('/groups/ESS/aalnaim/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(\"/groups/ESS/aalnaim/cmaq/prediction_maps/AirNow_\" + str(t) + \".tif\")\n    \nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/groups/ESS/aalnaim/cmaq/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/groups/ESS/aalnaim/cmaq/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" /groups/ESS/aalnaim/cmaq/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm /groups/ESS/aalnaim/cmaq/predctionAirNow.mp4')\n",
  "history_output" : "  File \"prediction_maps.py\", line 110\n    imageio.mimsave(\"/groups/ESS/aalnaim/cmaq/prediction.mp4', images, fps=10)\n                                                                             ^\nSyntaxError: EOL while scanning string literal\n",
  "history_begin_time" : 1654500507944,
  "history_end_time" : 1654500512174,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "qyxg89sb7zq",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/AirNow_\" + str(t) + \".tif\")\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i '+ home + '/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" '+ home + '/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm '+ home + '/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i '+ home + '/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" '+ home + '/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm '+ home + '/predctionAirNow.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 29, in <module>\n    df = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\", line 686, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\", line 452, in _read\n    parser = TextFileReader(fp_or_buf, **kwds)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\", line 946, in __init__\n    self._make_engine(self.engine)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\", line 1178, in _make_engine\n    self._engine = CParserWrapper(self.f, **self.options)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\", line 2008, in __init__\n    self._reader = parsers.TextReader(src, **kwds)\n  File \"pandas/_libs/parsers.pyx\", line 382, in pandas._libs.parsers.TextReader.__cinit__\n  File \"pandas/_libs/parsers.pyx\", line 674, in pandas._libs.parsers.TextReader._setup_parser_source\nFileNotFoundError: [Errno 2] No such file or directory: '/home/zsun/cmaq/prediction_files/prediction_rf.csv'\n",
  "history_begin_time" : 1654477566675,
  "history_end_time" : 1654477601258,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "roeaa3",
  "indicator" : "Failed"
},{
  "history_id" : "iqmp8lo8hbd",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/AirNow_\" + str(t) + \".tif\")\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i '+ home + '/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" '+ home + '/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm '+ home + '/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i '+ home + '/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" '+ home + '/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm '+ home + '/predctionAirNow.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 7, in <module>\n    import geopandas as gpd\nModuleNotFoundError: No module named 'geopandas'\n",
  "history_begin_time" : 1654466004552,
  "history_end_time" : 1654466005321,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "6fvj9bybla5",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/AirNow_\" + str(t) + \".tif\")\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i '+ home + '/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" '+ home + '/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm '+ home + '/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i '+ home + '/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" '+ home + '/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm '+ home + '/predctionAirNow.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 29, in <module>\n    df = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\", line 686, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\", line 452, in _read\n    parser = TextFileReader(fp_or_buf, **kwds)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\", line 946, in __init__\n    self._make_engine(self.engine)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\", line 1178, in _make_engine\n    self._engine = CParserWrapper(self.f, **self.options)\n  File \"/home/zsun/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\", line 2008, in __init__\n    self._reader = parsers.TextReader(src, **kwds)\n  File \"pandas/_libs/parsers.pyx\", line 382, in pandas._libs.parsers.TextReader.__cinit__\n  File \"pandas/_libs/parsers.pyx\", line 674, in pandas._libs.parsers.TextReader._setup_parser_source\nFileNotFoundError: [Errno 2] No such file or directory: '/home/zsun/cmaq/prediction_files/prediction_rf.csv'\n",
  "history_begin_time" : 1654456176250,
  "history_end_time" : 1654456208123,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "roeaa3",
  "indicator" : "Failed"
},{
  "history_id" : "uz46x5chifo",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/AirNow_\" + str(t) + \".tif\")\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i '+ home + '/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" '+ home + '/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm '+ home + '/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i '+ home + '/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" '+ home + '/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm '+ home + '/predctionAirNow.mp4')\n",
  "history_output" : "Running",
  "history_begin_time" : 1654319972952,
  "history_end_time" : 1654537091394,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "p6wvf2",
  "indicator" : "Stopped"
},{
  "history_id" : "zl0dxas1fen",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/AirNow_\" + str(t) + \".tif\")\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i '+ home + '/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" '+ home + '/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm '+ home + '/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i '+ home + '/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" '+ home + '/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm '+ home + '/predctionAirNow.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 8, in <module>\n    import cmaps\nModuleNotFoundError: No module named 'cmaps'\n",
  "history_begin_time" : 1654318014269,
  "history_end_time" : 1654318045679,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "roeaa3",
  "indicator" : "Done"
},{
  "history_id" : "zcneduczmek",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\n#os.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\nAirnowObs = AirnowObs.loc[AirnowObs['AirNOW_O3'] != -999]\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_Airnow = AirnowObs['YYYYMMDDHH'].unique()\ndfs_Airnow = dict(tuple(AirnowObs.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    #gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap, vmin=0,vmax=80 )\n    #cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n    #                  format='%.0f', boundaries=np.arange(0,84,4),       \n    #                  spacing='uniform', drawedges=True, pad=0.05)\n\n    #cb.outline.set_linewidth(2)\n    #cb.dividers.set_color('black')\n    #cb.dividers.set_linewidth(2)\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/CMAQ_\" + str(t) + \".tif\")\n\n    \nfor t_Airnow, t in zip(time_Airnow, time_):\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    \n    \n    predDf = gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n                      cmap=cmap, vmin=0,vmax=84  )\n    \n    df_Airnow = dfs_Airnow[t_Airnow]\n    # Add individual AirNow stations in US with color representation.\n    \n    gdfAirnow = gpd.GeoDataFrame(df_Airnow, geometry=gpd.points_from_xy(df_Airnow.Longitude,df_Airnow.Latitude))\n\n    gdfAirnow = gdfAirnow.set_crs(\"EPSG:4326\")\n    gdfAirnow.plot(ax=predDf, column='AirNOW_O3', marker='o', markersize=65, cmap=cmap, figsize=(20, 15), linewidths=1, edgecolors=\"black\")\n    \n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(\"AirNow Stations: \"+plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/AirNow_\" + str(t) + \".tif\")\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/CMAQ_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction.mp4', images, fps=10)\n\n\nfiles=glob.glob(\"/Users/uhhmed/prediction_maps/Airnow_*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(\"/Users/uhhmed/predctionAirNow.mp4\", images, fps=10)\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i '+ home + '/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" '+ home + '/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm '+ home + '/prediction.mp4')\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i '+ home + '/predctionAirNow.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" '+ home + '/predctionAirNow.gif')\n\n# remove the created .mp4 file\nos.system('rm '+ home + '/predctionAirNow.mp4')\n",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 8, in <module>\n    import cmaps\nModuleNotFoundError: No module named 'cmaps'\n",
  "history_begin_time" : 1654314798230,
  "history_end_time" : 1654314830034,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "roeaa3",
  "indicator" : "Done"
},{
  "history_id" : "vtvaz3j99z7",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\nos.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf = gdf.to_crs(\"+proj=lcc +lat_1=2 +lat_2=33.000 +lat_0=45.000 +lon_0=-97.000 +x_0=-97.000 +y_0=40.000 +datum=NAD83 +units=m +no_defs\")\n\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction.mp4', images, fps=10)\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i '+ home + '/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" '+ home + '/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm '+ home + '/prediction.mp4')\n",
  "history_output" : "",
  "history_begin_time" : 1653698755259,
  "history_end_time" : 1653700889963,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "YhalkCwcoFfg",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\nimport os\n\n\nmpl.rcParams['font.size'] = 25\nos.system('module load ffmpeg') # Uncomment if running on HOPPER\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ncmap = cmaps.WhiteBlueGreenYellowRed[0:262:12]\nnorm = mpl.colors.Normalize(vmin=0,vmax=84)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=False, figsize=(20, 18),\n         cmap=cmap )\n    cb = plt.colorbar(sm, ticks=list(range(0, 84, 4)), location='bottom', \t\n                      format='%.0f', boundaries=np.arange(0,84,4),       \n                      spacing='uniform', drawedges=True, pad=0.05)\n\n    cb.outline.set_linewidth(2)\n    cb.dividers.set_color('black')\n    cb.dividers.set_linewidth(2)\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\n#files = sorted(files)\nfiles = sorted(files)\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction.mp4', images, fps=10)\n\n\n# create .gif from .mp4 using FFmpeg\nos.system('ffmpeg -i '+ home + '/prediction.mp4 -vf \"scale=2000:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse, fps=10\" '+ home + '/prediction.gif')\n\n# remove the created .mp4 file\nos.system('rm '+ home + '/prediction.mp4')\n",
  "history_output" : "/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\n",
  "history_begin_time" : 1653399059064,
  "history_end_time" : 1653402790984,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "r4961ogi5rp",
  "history_input" : "# importing necessary libraries\nimport os\nimport pandas as pd\nimport matplotlib as m\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\nimport random\nimport string\n\n\n# printing lowercase\nletters = string.ascii_lowercase\nfolder_name =  ''.join(random.choice(letters) for i in range(5))\n\n\n#m.rcParams['font.size'] = 25\n#norm= m.colors.Normalize(vmin=0,vmax=80)\ncdict = {\n  'red'  :  ( (0.0, 0.25, .25), (0.02, .59, .59), (1., 1., 1.)),\n  'green':  ( (0.0, 0.0, 0.0), (0.02, .45, .45), (1., .97, .97)),\n  'blue' :  ( (0.0, 1.0, 1.0), (0.02, .75, .75), (1., 0.45, 0.45))\n}\n\ncm = m.colors.LinearSegmentedColormap('my_colormap', cdict, 1024)\n\n\n# home directory\nhome = \"D:/data/\"#str(Path.home())\ncmaq_folder = f\"{home}/cmaq/\"\ninput_folder = f\"{home}/cmaq/prediction_files/\"\nresult_folder = f\"{home}/cmaq/prediction_maps_{folder_name}/\"\nos.makedirs(cmaq_folder, exist_ok=True)\nos.makedirs(input_folder, exist_ok=True)\nos.makedirs(result_folder, exist_ok=True)\n\n# importing data\ndf = pd.read_csv(f'D:/data/prediction_rf.csv')\nAirnowObs = pd.read_csv(f\"D:/data/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\ntime_ = time_[:5]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    #gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    #print(cmaps.WhiteBlueGreenYellowRed())\n    \n    gdf.plot(column='prediction', \n             legend=True, \n             figsize=(20, 25),\n             cmap=cm,\n             #categorical=True,\n             #cmap=cmaps.WhiteBlueGreenYellowRed, \n             legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05}, \n             vmin=0, \n             vmax=80 )\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    print(t)\n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(f\"{result_folder}/{str(t)}.tif\")\n\n    \nfiles=glob.glob(f\"{result_folder}/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(f'{cmaq_folder}/prediction_{folder_name}.gif', images)",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 7, in <module>\n    import geopandas as gpd\nModuleNotFoundError: No module named 'geopandas'\n",
  "history_begin_time" : 1652934721295,
  "history_end_time" : 1652934722164,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "2hWdUd61m31u",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# Delete previous .tif images only (not folder) to reduce space if folder and files exist already.\nif Path(home + \"/cmaq/prediction_maps/\"):\n    for file in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\"):\n        if file.is_file():\n          [f.unlink() for f in Path(home + \"/cmaq/prediction_maps/\").glob(\"*\") if f.is_file()] \n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    #gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05}, vmin=0, vmax=80 )\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction.gif', images)",
  "history_output" : "Running",
  "history_begin_time" : 1652835729699,
  "history_end_time" : 1653400545931,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "Q7aByEWbhBW2",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n#fig, ax = plt.subplots(figsize=(20, 25))\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    #gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05}, vmin=0, vmax=80 )\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction.gif', images)",
  "history_output" : "Running",
  "history_begin_time" : 1652833318699,
  "history_end_time" : 1652835575643,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Stopped"
},{
  "history_id" : "6j67tfndue7",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n#fig, ax = plt.subplots(figsize=(20, 25))\n\n\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    #gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05}, vmin=0, vmax=80 )\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction.gif', images)",
  "history_output" : "/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\nTraceback (most recent call last):\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/PIL/Image.py\", line 2212, in save\n    save_handler(self, fp, filename)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/PIL/TiffImagePlugin.py\", line 1769, in _save\n    ImageFile._save(\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/PIL/ImageFile.py\", line 496, in _save\n    fp.flush()\nOSError: [Errno 122] Disk quota exceeded\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"prediction_maps.py\", line 58, in <module>\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/pyplot.py\", line 958, in savefig\n    res = fig.savefig(*args, **kwargs)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/figure.py\", line 3019, in savefig\n    self.canvas.print_figure(fname, **kwargs)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/backend_bases.py\", line 2319, in print_figure\n    result = print_method(\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/backend_bases.py\", line 1648, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py\", line 594, in print_tif\n    return (Image.fromarray(np.asarray(self.buffer_rgba()))\n  File \"/home/aalnaim/CMAQAI/lib/python3.8/site-packages/PIL/Image.py\", line 2216, in save\n    fp.close()\nOSError: [Errno 122] Disk quota exceeded\n",
  "history_begin_time" : 1652832428259,
  "history_end_time" : 1652832957060,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "atc9piiq4bd",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_rf.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n#fig, ax = plt.subplots(figsize=(20, 25))\n\ntime_ = time_[:3]\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    #gdf = gdf.set_crs(\"EPSG:3762\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05}, vmin=0, vmax=80 )\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction_min.gif', images)",
  "history_output" : "/home/aalnaim/cmaq/prediction_maps/2022050912.tif\n/home/aalnaim/cmaq/prediction_maps/2022050913.tif\n/home/aalnaim/cmaq/prediction_maps/2022050914.tif\n/home/aalnaim/cmaq/prediction_maps/2022050915.tif\n/home/aalnaim/cmaq/prediction_maps/2022050916.tif\n/home/aalnaim/cmaq/prediction_maps/2022051712.tif\n/home/aalnaim/cmaq/prediction_maps/2022051713.tif\n/home/aalnaim/cmaq/prediction_maps/2022051714.tif\n",
  "history_begin_time" : 1652831564484,
  "history_end_time" : 1652831640120,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "IrZ4cMXvW77L",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n# fig, ax = plt.subplots(figsize=(20, 25))\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, norm=norm, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05})\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction.gif', images)",
  "history_output" : null,
  "history_begin_time" : 1652795640186,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : null
},{
  "history_id" : "EHRAUeY2Am5e",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n# fig, ax = plt.subplots(figsize=(20, 25))\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, norm=norm, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05})\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction.gif', images)",
  "history_output" : "",
  "history_begin_time" : 1652795412335,
  "history_end_time" : 1652795640225,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "0a6oMvVMQkch",
  "history_input" : "# importing necessary libraries\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport geopandas as gpd\nimport cmaps\nfrom datetime import datetime\n\nimport imageio\nimport glob\n\n\nmatplotlib.rcParams['font.size'] = 25\nnorm= matplotlib.colors.Normalize(vmin=0,vmax=80)\n\n\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf = pd.read_csv(home + '/cmaq/prediction_files/prediction_xgboost.csv')\nAirnowObs = pd.read_csv(home + \"/cmaq/observation.csv\")\n\ntime_ = df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH')))  # grouping the data by YYMMDDHH\n\n# fig, ax = plt.subplots(figsize=(20, 25))\n\nfor t in time_:\n    \n    df = dfs[t]\n    \n    gdf = gpd.GeoDataFrame(\n        df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n    gdf = gdf.set_crs(\"EPSG:4326\", allow_override=True)\n    #gdf = gdf.set_crs(\"EPSG:4326\")\n    gdf.plot(column='prediction', legend=True, figsize=(20, 25),\n         cmap=cmaps.WhiteBlueGreenYellowRed, norm=norm, legend_kwds={'orientation': \"horizontal\", \"pad\": 0.05})\n    \n    # Add individual AirNow stations in US with color representation.\n    \n    # gdfAirnow = gpd.GeoDataFrame(\n        # AirnowObs, geometry=gpd.points_from_xy(AirnowObs.Longitude, AirnowObs.Latitude))\n    # gdfAirnow.plot(ax=predDF, column='AirNOW_O3', marker='o', cmap=cmaps.WhiteBlueGreenYellowRed, figsize=(20, 20))\n    \n    # Add US states boundries.\n    \n    # states = gpd.read_file('usStates/cb_2018_us_state_500k.shp')\n\t# states = states.to_crs(\"EPSG:4326\")\n\t# states.boundary.plot(ax=ax)\n    \n    dateObj = datetime.strptime(str(t), \"%Y%m%d%H\")\n    plotTitle = datetime.strftime(dateObj, \"%Y-%m-%d (Time: %-H)\")\n    plt.title(plotTitle, fontdict={'fontsize': 35})\n    plt.savefig(home + \"/cmaq/prediction_maps/\" + str(t) + \".tif\")\n\n    \nfiles=glob.glob(home + \"/cmaq/prediction_maps/*.tif\")\nimages=[]\n\nfor i in files:\n    print(i)\n    img=imageio.imread(i)\n    images.append(img)\n    \nimageio.mimsave(home+'/prediction.gif', images)",
  "history_output" : null,
  "history_begin_time" : 1652795403314,
  "history_end_time" : null,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : null,
  "indicator" : null
},{
  "history_id" : "bzla5a7gju4",
  "history_input" : null,
  "history_output" : "Received unknown response code",
  "history_begin_time" : 1652786146413,
  "history_end_time" : 1652786147149,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "1suhj06qxi7",
  "history_input" : "\n## importing necessary libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom pathlib import Path\nimport geopandas as gpd\nimport shapely\n#from osgeo import gdal\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf=pd.read_csv(home+'/cmaq/prediction_files/prediction_xgboost.csv')\n\ntime_=df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH'))) # grouping the data by YYMMDDHH\n\nfor t in time_:\n  df=dfs[t]\n  gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n  gdf = gdf.set_crs(\"EPSG:4326\",allow_override=True)\n  #gdf = gdf.set_crs(\"EPSG:4326\")\n  gdf.plot(column='prediction',cmap='bwr')\n  plt.savefig(home+\"/cmaq/prediction_maps/\"+str(t)+\".tif\")\n  \n\n  \n  \n  \n  \n\n# total area for the grid\n#  xmin, ymin, xmax, ymax= gdf.geometry.total_bounds\n#  gdf=gdal.OpenEx(gdf.to_json(), gdal.OF_VECTOR)\n# how many cells across and down\n#  xsize=422\n#  ysize=265\n#  gdal.Grid(home+\"/cmaq/prediction_maps/\"+str(t)+\".tif\", gdf, zfield=\"prediction\",outputSRS =\"EPSG:4326\",    algorithm=\"linear\", outputBounds=[xmax,ymax,xmin,ymin], width=xsize, height=ysize)\n",
  "history_output" : "/home/aalnaim/CMAQAI/lib/python3.8/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\n",
  "history_begin_time" : 1652055417930,
  "history_end_time" : 1652786159490,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "p6wvf2",
  "indicator" : "Failed"
},{
  "history_id" : "31n0woa3ywm",
  "history_input" : "\n## importing necessary libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom pathlib import Path\nimport geopandas as gpd\nimport shapely\nfrom osgeo import gdal\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf=pd.read_csv(home+'/cmaq/prediction_files/prediction_xgboost.csv')\n\ntime_=df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH'))) # grouping the data by YYMMDDHH\n\nfor t in time_:\n  df=dfs[t]\n  gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n  gdf = gdf.set_crs(\"EPSG:4326\",allow_override=True)\n  #gdf = gdf.set_crs(\"EPSG:4326\")\n  gdf.plot(column='prediction',cmap='bwr')\n  plt.savefig(home+\"/cmaq/prediction_maps/\"+str(t)+\".tif\")\n  \n\n  \n  \n  \n  \n\n# total area for the grid\n#  xmin, ymin, xmax, ymax= gdf.geometry.total_bounds\n#  gdf=gdal.OpenEx(gdf.to_json(), gdal.OF_VECTOR)\n# how many cells across and down\n#  xsize=422\n#  ysize=265\n#  gdal.Grid(home+\"/cmaq/prediction_maps/\"+str(t)+\".tif\", gdf, zfield=\"prediction\",outputSRS =\"EPSG:4326\",    algorithm=\"linear\", outputBounds=[xmax,ymax,xmin,ymin], width=xsize, height=ysize)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"prediction_maps.py\", line 5, in <module>\n    import plotly.express as px\nModuleNotFoundError: No module named 'plotly'\n",
  "history_begin_time" : 1652048263170,
  "history_end_time" : 1652048283203,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "p6wvf2",
  "indicator" : "Done"
},{
  "history_id" : "e9a0atiwzvg",
  "history_input" : "\n## importing necessary libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom pathlib import Path\nimport geopandas as gpd\nimport shapely\nfrom osgeo import gdal\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf=pd.read_csv(home+'/cmaq/prediction_files/prediction_xgboost.csv')\n\ntime_=df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH'))) # grouping the data by YYMMDDHH\n\nfor t in time_:\n  df=dfs[t]\n  gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n  gdf = gdf.set_crs(\"EPSG:4326\",allow_override=True)\n  #gdf = gdf.set_crs(\"EPSG:4326\")\n  gdf.plot(column='prediction',cmap='bwr')\n  plt.savefig(home+\"/cmaq/prediction_maps/maps/\"+str(t)+\".tif\")\n  \n\n  \n  \n  \n  \n\n# total area for the grid\n#  xmin, ymin, xmax, ymax= gdf.geometry.total_bounds\n#  gdf=gdal.OpenEx(gdf.to_json(), gdal.OF_VECTOR)\n# how many cells across and down\n#  xsize=422\n#  ysize=265\n#  gdal.Grid(home+\"/cmaq/prediction_maps/\"+str(t)+\".tif\", gdf, zfield=\"prediction\",outputSRS =\"EPSG:4326\",    algorithm=\"linear\", outputBounds=[xmax,ymax,xmin,ymin], width=xsize, height=ysize)\n",
  "history_output" : "",
  "history_begin_time" : 1650481223744,
  "history_end_time" : 1650481409083,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "3wgogh",
  "indicator" : "Done"
},{
  "history_id" : "ui5x2vpwlrt",
  "history_input" : "\n## importing necessary libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom pathlib import Path\nimport geopandas as gpd\nimport shapely\nfrom osgeo import gdal\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf=pd.read_csv(home+'/cmaq/prediction_files/prediction_xgboost.csv')\n\ntime_=df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH'))) # grouping the data by YYMMDDHH\n\nfor t in time_:\n  df=dfs[t]\n  gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n  gdf = gdf.set_crs(\"EPSG:4326\",allow_override=True)\n  #gdf = gdf.set_crs(\"EPSG:4326\")\n  gdf.plot(column='prediction',cmap='bwr')\n  plt.savefig(home+\"/cmaq/prediction_maps/maps/\"+str(t)+\".tif\")\n  \n\n  \n  \n  \n  \n\n# total area for the grid\n#  xmin, ymin, xmax, ymax= gdf.geometry.total_bounds\n#  gdf=gdal.OpenEx(gdf.to_json(), gdal.OF_VECTOR)\n# how many cells across and down\n#  xsize=422\n#  ysize=265\n#  gdal.Grid(home+\"/cmaq/prediction_maps/\"+str(t)+\".tif\", gdf, zfield=\"prediction\",outputSRS =\"EPSG:4326\",    algorithm=\"linear\", outputBounds=[xmax,ymax,xmin,ymin], width=xsize, height=ysize)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/mislam25/gw-workspace/ui5x2vpwlrt/prediction_maps.py\", line 14, in <module>\n    df=pd.read_csv(home+'/cmaq/prediction_files/prediction_xgboost.csv')\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py\", line 311, in wrapper\n    return func(*args, **kwargs)\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 586, in read_csv\n    return _read(filepath_or_buffer, kwds)\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 482, in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 811, in __init__\n    self._engine = self._make_engine(self.engine)\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py\", line 1040, in _make_engine\n    return mapping[engine](self.f, **self.options)  # type: ignore[call-arg]\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/c_parser_wrapper.py\", line 51, in __init__\n    self._open_handles(src, kwds)\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/base_parser.py\", line 222, in _open_handles\n    self.handles = get_handle(\n  File \"/home/mislam25/anaconda3/lib/python3.9/site-packages/pandas/io/common.py\", line 702, in get_handle\n    handle = open(\nFileNotFoundError: [Errno 2] No such file or directory: '/home/mislam25/cmaq/prediction_files/prediction_xgboost.csv'\n",
  "history_begin_time" : 1650474160742,
  "history_end_time" : 1650474371342,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "3wgogh",
  "indicator" : "Done"
},{
  "history_id" : "p20m01wlgz3",
  "history_input" : "\n## importing necessary libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom pathlib import Path\nimport geopandas as gpd\nimport shapely\nfrom osgeo import gdal\n# home directory\nhome = str(Path.home())\n\n# importing data\ndf=pd.read_csv(home+'/cmaq/prediction_files/prediction_xgboost.csv')\n\ntime_=df['YYYYMMDDHH'].unique()\ndfs = dict(tuple(df.groupby('YYYYMMDDHH'))) # grouping the data by YYMMDDHH\n\nfor t in time_:\n  df=dfs[t]\n  gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.Longitude, df.Latitude))\n  gdf = gdf.set_crs(\"EPSG:4326\",allow_override=True)\n  #gdf = gdf.set_crs(\"EPSG:4326\")\n  gdf.plot(column='prediction')\n  plt.savefig(home+\"/cmaq/prediction_maps/maps/\"+str(t)+\".tif\")\n  \n\n  \n  \n  \n  \n\n# total area for the grid\n#  xmin, ymin, xmax, ymax= gdf.geometry.total_bounds\n#  gdf=gdal.OpenEx(gdf.to_json(), gdal.OF_VECTOR)\n# how many cells across and down\n#  xsize=422\n#  ysize=265\n#  gdal.Grid(home+\"/cmaq/prediction_maps/\"+str(t)+\".tif\", gdf, zfield=\"prediction\",outputSRS =\"EPSG:4326\",    algorithm=\"linear\", outputBounds=[xmax,ymax,xmin,ymin], width=xsize, height=ysize)\n",
  "history_output" : "/home/mislam25/anaconda3/lib/python3.9/site-packages/geopandas/plotting.py:661: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).\n  fig, ax = plt.subplots(figsize=figsize)\n",
  "history_begin_time" : 1650252772225,
  "history_end_time" : 1650253523466,
  "history_notes" : null,
  "history_process" : "6oifw4",
  "host_id" : "3wgogh",
  "indicator" : "Done"
},]
